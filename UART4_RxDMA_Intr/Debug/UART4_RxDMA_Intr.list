
UART4_RxDMA_Intr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c68  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee4  08003ee4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eec  08003eec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ef0  08003ef0  00013ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  08003f64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003f64  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc5e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021a3  00000000  00000000  0002dcf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  0002fea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  00030bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002110c  00000000  00000000  000317a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9cf  00000000  00000000  000528b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c37f2  00000000  00000000  0005e283  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121a75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  00121af0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000070 	.word	0x20000070
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003dd4 	.word	0x08003dd4

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000074 	.word	0x20000074
 80001c0:	08003dd4 	.word	0x08003dd4

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	4604      	mov	r4, r0
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0c03 	orr.w	ip, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	fbbc f7fe 	udiv	r7, ip, lr
 800023a:	fa1f f885 	uxth.w	r8, r5
 800023e:	fb0e c317 	mls	r3, lr, r7, ip
 8000242:	fb07 f908 	mul.w	r9, r7, r8
 8000246:	0c21      	lsrs	r1, r4, #16
 8000248:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024c:	4599      	cmp	r9, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 31ff 	add.w	r1, r7, #4294967295
 8000256:	f080 811c 	bcs.w	8000492 <__udivmoddi4+0x28e>
 800025a:	4599      	cmp	r9, r3
 800025c:	f240 8119 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	eba3 0309 	sub.w	r3, r3, r9
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	fb00 f108 	mul.w	r1, r0, r8
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027a:	42a1      	cmp	r1, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	192c      	adds	r4, r5, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 8107 	bcs.w	8000496 <__udivmoddi4+0x292>
 8000288:	42a1      	cmp	r1, r4
 800028a:	f240 8104 	bls.w	8000496 <__udivmoddi4+0x292>
 800028e:	3802      	subs	r0, #2
 8000290:	442c      	add	r4, r5
 8000292:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000296:	2700      	movs	r7, #0
 8000298:	1a64      	subs	r4, r4, r1
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	2300      	movs	r3, #0
 800029e:	40d4      	lsrs	r4, r2
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ec 	beq.w	800048c <__udivmoddi4+0x288>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0x158>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fb 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469c      	mov	ip, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	2701      	movs	r7, #1
 80002f8:	1b49      	subs	r1, r1, r5
 80002fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fe:	fa1f f985 	uxth.w	r9, r5
 8000302:	fbb1 fef8 	udiv	lr, r1, r8
 8000306:	fb08 111e 	mls	r1, r8, lr, r1
 800030a:	fb09 f00e 	mul.w	r0, r9, lr
 800030e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000312:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x126>
 800031a:	18eb      	adds	r3, r5, r3
 800031c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4298      	cmp	r0, r3
 8000324:	f200 80cd 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 8000328:	468e      	mov	lr, r1
 800032a:	1a1b      	subs	r3, r3, r0
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	fb09 f900 	mul.w	r9, r9, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033e:	45a1      	cmp	r9, r4
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000342:	192c      	adds	r4, r5, r4
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a1      	cmp	r9, r4
 800034c:	f200 80b6 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000350:	4618      	mov	r0, r3
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800035a:	e79e      	b.n	800029a <__udivmoddi4+0x96>
 800035c:	f1c7 0520 	rsb	r5, r7, #32
 8000360:	40bb      	lsls	r3, r7
 8000362:	fa22 fc05 	lsr.w	ip, r2, r5
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa21 f405 	lsr.w	r4, r1, r5
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fbb4 f9fe 	udiv	r9, r4, lr
 8000376:	fa1f f88c 	uxth.w	r8, ip
 800037a:	fb0e 4419 	mls	r4, lr, r9, r4
 800037e:	fa20 f305 	lsr.w	r3, r0, r5
 8000382:	40b9      	lsls	r1, r7
 8000384:	fb09 fa08 	mul.w	sl, r9, r8
 8000388:	4319      	orrs	r1, r3
 800038a:	0c0b      	lsrs	r3, r1, #16
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	45a2      	cmp	sl, r4
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f307 	lsl.w	r3, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	45a2      	cmp	sl, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	eba4 040a 	sub.w	r4, r4, sl
 80003b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80003c0:	fb00 fa08 	mul.w	sl, r0, r8
 80003c4:	b289      	uxth	r1, r1
 80003c6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003dc:	3802      	subs	r0, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e4:	fba0 8902 	umull	r8, r9, r0, r2
 80003e8:	eba4 040a 	sub.w	r4, r4, sl
 80003ec:	454c      	cmp	r4, r9
 80003ee:	4641      	mov	r1, r8
 80003f0:	46ce      	mov	lr, r9
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d069      	beq.n	80004ce <__udivmoddi4+0x2ca>
 80003fa:	1a5a      	subs	r2, r3, r1
 80003fc:	eb64 040e 	sbc.w	r4, r4, lr
 8000400:	fa04 f505 	lsl.w	r5, r4, r5
 8000404:	fa22 f307 	lsr.w	r3, r2, r7
 8000408:	40fc      	lsrs	r4, r7
 800040a:	431d      	orrs	r5, r3
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	4095      	lsls	r5, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	fa21 f003 	lsr.w	r0, r1, r3
 800041e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000422:	fbb0 f7f8 	udiv	r7, r0, r8
 8000426:	fa1f f985 	uxth.w	r9, r5
 800042a:	fb08 0017 	mls	r0, r8, r7, r0
 800042e:	fa24 f303 	lsr.w	r3, r4, r3
 8000432:	4091      	lsls	r1, r2
 8000434:	fb07 fc09 	mul.w	ip, r7, r9
 8000438:	430b      	orrs	r3, r1
 800043a:	0c19      	lsrs	r1, r3, #16
 800043c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000440:	458c      	cmp	ip, r1
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x254>
 8000448:	1869      	adds	r1, r5, r1
 800044a:	f107 30ff 	add.w	r0, r7, #4294967295
 800044e:	d231      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000450:	458c      	cmp	ip, r1
 8000452:	d92f      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	3f02      	subs	r7, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 010c 	sub.w	r1, r1, ip
 800045c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000460:	fb08 1c10 	mls	ip, r8, r0, r1
 8000464:	fb00 fe09 	mul.w	lr, r0, r9
 8000468:	b299      	uxth	r1, r3
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 33ff 	add.w	r3, r0, #4294967295
 8000478:	d218      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047a:	458e      	cmp	lr, r1
 800047c:	d916      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4637      	mov	r7, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000492:	460f      	mov	r7, r1
 8000494:	e6e6      	b.n	8000264 <__udivmoddi4+0x60>
 8000496:	4618      	mov	r0, r3
 8000498:	e6fb      	b.n	8000292 <__udivmoddi4+0x8e>
 800049a:	4543      	cmp	r3, r8
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb8 0102 	subs.w	r1, r8, r2
 80004a2:	eb69 020c 	sbc.w	r2, r9, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	4696      	mov	lr, r2
 80004aa:	e7a4      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e7e8      	b.n	8000482 <__udivmoddi4+0x27e>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e7cf      	b.n	8000458 <__udivmoddi4+0x254>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	442c      	add	r4, r5
 80004c0:	e747      	b.n	8000352 <__udivmoddi4+0x14e>
 80004c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	e72f      	b.n	800032a <__udivmoddi4+0x126>
 80004ca:	4638      	mov	r0, r7
 80004cc:	e707      	b.n	80002de <__udivmoddi4+0xda>
 80004ce:	4637      	mov	r7, r6
 80004d0:	e6e8      	b.n	80002a4 <__udivmoddi4+0xa0>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_DMA_Init+0x3c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <MX_DMA_Init+0x3c>)
 80004e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_DMA_Init+0x3c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	200d      	movs	r0, #13
 8000500:	f000 fd1b 	bl	8000f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000504:	200d      	movs	r0, #13
 8000506:	f000 fd34 	bl	8000f72 <HAL_NVIC_EnableIRQ>

}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023800 	.word	0x40023800

08000518 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_GPIO_Init+0x80>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a18      	ldr	r2, [pc, #96]	; (8000598 <MX_GPIO_Init+0x80>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_GPIO_Init+0x80>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_GPIO_Init+0x80>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a11      	ldr	r2, [pc, #68]	; (8000598 <MX_GPIO_Init+0x80>)
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_GPIO_Init+0x80>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f244 0181 	movw	r1, #16513	; 0x4081
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <MX_GPIO_Init+0x84>)
 800056e:	f001 fa47 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000572:	f244 0381 	movw	r3, #16513	; 0x4081
 8000576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4619      	mov	r1, r3
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_GPIO_Init+0x84>)
 800058c:	f001 f89a 	bl	80016c4 <HAL_GPIO_Init>

}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40023800 	.word	0x40023800
 800059c:	40020400 	.word	0x40020400

080005a0 <Blink_LED>:
void application_handling(unsigned char *cmd);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void inline Blink_LED(unsigned int pin, unsigned char sr){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(GPIOB, pin, sr);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	78fa      	ldrb	r2, [r7, #3]
 80005b2:	4619      	mov	r1, r3
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <Blink_LED+0x24>)
 80005b6:	f001 fa23 	bl	8001a00 <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020400 	.word	0x40020400

080005c8 <delayfor>:

void delayfor(unsigned long int delay){
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	for(unsigned long int i=0;i<delay;i++);
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	e002      	b.n	80005dc <delayfor+0x14>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d3f8      	bcc.n	80005d6 <delayfor+0xe>
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
	...

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fb5c 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f856 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f7ff ff8c 	bl	8000518 <MX_GPIO_Init>
  MX_DMA_Init();
 8000600:	f7ff ff6a 	bl	80004d8 <MX_DMA_Init>
  MX_UART4_Init();
 8000604:	f000 fa7e 	bl	8000b04 <MX_UART4_Init>
  MX_TIM1_Init();
 8000608:	f000 f9f4 	bl	80009f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart4,UART_IT_RXNE);
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <main+0xa0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	68da      	ldr	r2, [r3, #12]
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <main+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f042 0220 	orr.w	r2, r2, #32
 800061a:	60da      	str	r2, [r3, #12]
  printf("Application Start\r\n");
 800061c:	481d      	ldr	r0, [pc, #116]	; (8000694 <main+0xa4>)
 800061e:	f002 ffb5 	bl	800358c <puts>
  strcpy(tx_uart4_buf,"Application Start\r\n");
 8000622:	4a1d      	ldr	r2, [pc, #116]	; (8000698 <main+0xa8>)
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <main+0xac>)
 8000626:	4614      	mov	r4, r2
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	682b      	ldr	r3, [r5, #0]
 8000630:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart4,(uint8_t *)&tx_uart4_buf,strlen(tx_uart4_buf),100);
 8000632:	4819      	ldr	r0, [pc, #100]	; (8000698 <main+0xa8>)
 8000634:	f7ff fdc6 	bl	80001c4 <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	b29a      	uxth	r2, r3
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	4916      	ldr	r1, [pc, #88]	; (8000698 <main+0xa8>)
 8000640:	4813      	ldr	r0, [pc, #76]	; (8000690 <main+0xa0>)
 8000642:	f002 f9fa 	bl	8002a3a <HAL_UART_Transmit>
  HAL_UART_Receive_DMA(&huart4,rx_uart4_buf,8);
 8000646:	2208      	movs	r2, #8
 8000648:	4915      	ldr	r1, [pc, #84]	; (80006a0 <main+0xb0>)
 800064a:	4811      	ldr	r0, [pc, #68]	; (8000690 <main+0xa0>)
 800064c:	f002 fa88 	bl	8002b60 <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  if(msg_flag){
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <main+0xb4>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00a      	beq.n	800066e <main+0x7e>
		  application_handling(rx_uart4_buf);
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <main+0xb0>)
 800065a:	f000 f861 	bl	8000720 <application_handling>
		  msg_flag=0;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <main+0xb4>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
		  memset(rx_uart4_buf, 0, sizeof(rx_uart4_buf));
 8000664:	2232      	movs	r2, #50	; 0x32
 8000666:	2100      	movs	r1, #0
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <main+0xb0>)
 800066a:	f002 ff2b 	bl	80034c4 <memset>
	  }
	  Blink_LED(BLUE,GPIO_PIN_SET);//Blink_LED(GREEN,GPIO_PIN_SET);
 800066e:	2101      	movs	r1, #1
 8000670:	2080      	movs	r0, #128	; 0x80
 8000672:	f7ff ff95 	bl	80005a0 <Blink_LED>
	  delayfor(60000);
 8000676:	f64e 2060 	movw	r0, #60000	; 0xea60
 800067a:	f7ff ffa5 	bl	80005c8 <delayfor>
	  Blink_LED(BLUE,GPIO_PIN_RESET);//Blink_LED(GREEN,GPIO_PIN_RESET);
 800067e:	2100      	movs	r1, #0
 8000680:	2080      	movs	r0, #128	; 0x80
 8000682:	f7ff ff8d 	bl	80005a0 <Blink_LED>
	  delayfor(60000);
 8000686:	f64e 2060 	movw	r0, #60000	; 0xea60
 800068a:	f7ff ff9d 	bl	80005c8 <delayfor>
	  if(msg_flag){
 800068e:	e7df      	b.n	8000650 <main+0x60>
 8000690:	20000164 	.word	0x20000164
 8000694:	08003dec 	.word	0x08003dec
 8000698:	200000c4 	.word	0x200000c4
 800069c:	08003e00 	.word	0x08003e00
 80006a0:	20000090 	.word	0x20000090
 80006a4:	2000008c 	.word	0x2000008c

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b092      	sub	sp, #72	; 0x48
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	2230      	movs	r2, #48	; 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 ff04 	bl	80034c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f9a6 	bl	8001a30 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006ea:	f000 f873 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fbe2 	bl	8001ed0 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000712:	f000 f85f 	bl	80007d4 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3748      	adds	r7, #72	; 0x48
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <application_handling>:

/* USER CODE BEGIN 4 */

void application_handling(unsigned char *cmd)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	if(strstr(cmd, "LED ON") != NULL)
 8000728:	4913      	ldr	r1, [pc, #76]	; (8000778 <application_handling+0x58>)
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f002 ff36 	bl	800359c <strstr>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d008      	beq.n	8000748 <application_handling+0x28>
	{
		//Turn LED ON
		//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
		Blink_LED(RED,GPIO_PIN_SET);
 8000736:	2101      	movs	r1, #1
 8000738:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800073c:	f7ff ff30 	bl	80005a0 <Blink_LED>
		printf("RED LED Turned ON\r\n");
 8000740:	480e      	ldr	r0, [pc, #56]	; (800077c <application_handling+0x5c>)
 8000742:	f002 ff23 	bl	800358c <puts>
	else
	{
		//Invalid command
		printf("Invalid Command!\r\n");
	}
}
 8000746:	e012      	b.n	800076e <application_handling+0x4e>
	else if(strstr(cmd, "LED OFF") != NULL)
 8000748:	490d      	ldr	r1, [pc, #52]	; (8000780 <application_handling+0x60>)
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f002 ff26 	bl	800359c <strstr>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d008      	beq.n	8000768 <application_handling+0x48>
		Blink_LED(RED,GPIO_PIN_RESET);
 8000756:	2100      	movs	r1, #0
 8000758:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800075c:	f7ff ff20 	bl	80005a0 <Blink_LED>
		printf("RED LED Turned OFF\r\n");
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <application_handling+0x64>)
 8000762:	f002 ff13 	bl	800358c <puts>
}
 8000766:	e002      	b.n	800076e <application_handling+0x4e>
		printf("Invalid Command!\r\n");
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <application_handling+0x68>)
 800076a:	f002 ff0f 	bl	800358c <puts>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	08003e14 	.word	0x08003e14
 800077c:	08003e1c 	.word	0x08003e1c
 8000780:	08003e30 	.word	0x08003e30
 8000784:	08003e38 	.word	0x08003e38
 8000788:	08003e4c 	.word	0x08003e4c

0800078c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART4){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <HAL_UART_RxCpltCallback+0x38>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d102      	bne.n	80007a4 <HAL_UART_RxCpltCallback+0x18>
		msg_flag=1;
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_UART_RxCpltCallback+0x3c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
	}
    HAL_UART_Transmit(&huart4, rx_uart4_buf, 8, 100);
 80007a4:	2364      	movs	r3, #100	; 0x64
 80007a6:	2208      	movs	r2, #8
 80007a8:	4908      	ldr	r1, [pc, #32]	; (80007cc <HAL_UART_RxCpltCallback+0x40>)
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <HAL_UART_RxCpltCallback+0x44>)
 80007ac:	f002 f945 	bl	8002a3a <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart4, rx_uart4_buf, 8);
 80007b0:	2208      	movs	r2, #8
 80007b2:	4906      	ldr	r1, [pc, #24]	; (80007cc <HAL_UART_RxCpltCallback+0x40>)
 80007b4:	4806      	ldr	r0, [pc, #24]	; (80007d0 <HAL_UART_RxCpltCallback+0x44>)
 80007b6:	f002 f9d3 	bl	8002b60 <HAL_UART_Receive_DMA>
    //HAL_UART_Receive_IT(&huart4, rx_uart4_buf, 12);
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40004c00 	.word	0x40004c00
 80007c8:	2000008c 	.word	0x2000008c
 80007cc:	20000090 	.word	0x20000090
 80007d0:	20000164 	.word	0x20000164

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x48>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_MspInit+0x48>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	; 0x44
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x48>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_MspInit+0x48>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_MspInit+0x48>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_MspInit+0x48>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40023800 	.word	0x40023800

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <HardFault_Handler+0x4>

0800083e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <MemManage_Handler+0x4>

08000844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <BusFault_Handler+0x4>

0800084a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <UsageFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000878:	f000 fa6c 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <DMA1_Stream2_IRQHandler+0x10>)
 8000886:	f000 fcb7 	bl	80011f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200001ec 	.word	0x200001ec

08000894 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <UART4_IRQHandler+0x10>)
 800089a:	f002 f9e1 	bl	8002c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000164 	.word	0x20000164

080008a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	e00a      	b.n	80008d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ba:	f3af 8000 	nop.w
 80008be:	4601      	mov	r1, r0
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	60ba      	str	r2, [r7, #8]
 80008c6:	b2ca      	uxtb	r2, r1
 80008c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbf0      	blt.n	80008ba <_read+0x12>
	}

return len;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e009      	b.n	8000908 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	60ba      	str	r2, [r7, #8]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	dbf1      	blt.n	80008f4 <_write+0x12>
	}
	return len;
 8000910:	687b      	ldr	r3, [r7, #4]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <_close>:

int _close(int file)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
	return -1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000940:	605a      	str	r2, [r3, #4]
	return 0;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <_isatty>:

int _isatty(int file)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
	return 1;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000962:	b480      	push	{r7}
 8000964:	b085      	sub	sp, #20
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
	return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
	...

0800097c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <_sbrk+0x5c>)
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <_sbrk+0x60>)
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <_sbrk+0x64>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <_sbrk+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d207      	bcs.n	80009bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ac:	f002 fd60 	bl	8003470 <__errno>
 80009b0:	4602      	mov	r2, r0
 80009b2:	230c      	movs	r3, #12
 80009b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e009      	b.n	80009d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <_sbrk+0x64>)
 80009cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20020000 	.word	0x20020000
 80009dc:	00000400 	.word	0x00000400
 80009e0:	200000f8 	.word	0x200000f8
 80009e4:	20000258 	.word	0x20000258

080009e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000a22:	4a27      	ldr	r2, [pc, #156]	; (8000ac0 <MX_TIM1_Init+0xcc>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000a34:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000a38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a4c:	481b      	ldr	r0, [pc, #108]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000a4e:	f001 fc2b 	bl	80022a8 <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000a58:	f7ff febc 	bl	80007d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	4619      	mov	r1, r3
 8000a68:	4814      	ldr	r0, [pc, #80]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000a6a:	f001 fc6c 	bl	8002346 <HAL_TIM_ConfigClockSource>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a74:	f7ff feae 	bl	80007d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a78:	2306      	movs	r3, #6
 8000a7a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000a88:	f001 fd14 	bl	80024b4 <HAL_TIM_SlaveConfigSynchro>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000a92:	f7ff fe9f 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_TIM1_Init+0xc8>)
 8000aa4:	f001 ff02 	bl	80028ac <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000aae:	f7ff fe91 	bl	80007d4 <Error_Handler>
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	; 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200001a4 	.word	0x200001a4
 8000ac0:	40010000 	.word	0x40010000

08000ac4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_TIM_Base_MspInit+0x38>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10d      	bne.n	8000af2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_TIM_Base_MspInit+0x3c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	40010000 	.word	0x40010000
 8000b00:	40023800 	.word	0x40023800

08000b04 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_UART4_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_UART4_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_UART4_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_UART4_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_UART4_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_UART4_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_UART4_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_UART4_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_UART4_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_UART4_Init+0x4c>)
 8000b3c:	f001 ff30 	bl	80029a0 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000b46:	f7ff fe45 	bl	80007d4 <Error_Handler>
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000164 	.word	0x20000164
 8000b54:	40004c00 	.word	0x40004c00

08000b58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a34      	ldr	r2, [pc, #208]	; (8000c48 <HAL_UART_MspInit+0xf0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d162      	bne.n	8000c40 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b33      	ldr	r3, [pc, #204]	; (8000c4c <HAL_UART_MspInit+0xf4>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a32      	ldr	r2, [pc, #200]	; (8000c4c <HAL_UART_MspInit+0xf4>)
 8000b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <HAL_UART_MspInit+0xf4>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <HAL_UART_MspInit+0xf4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a2b      	ldr	r2, [pc, #172]	; (8000c4c <HAL_UART_MspInit+0xf4>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <HAL_UART_MspInit+0xf4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4820      	ldr	r0, [pc, #128]	; (8000c50 <HAL_UART_MspInit+0xf8>)
 8000bd0:	f000 fd78 	bl	80016c4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000bd6:	4a20      	ldr	r2, [pc, #128]	; (8000c58 <HAL_UART_MspInit+0x100>)
 8000bd8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000bdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000be0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000c14:	480f      	ldr	r0, [pc, #60]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000c16:	f000 f9c7 	bl	8000fa8 <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c20:	f7ff fdd8 	bl	80007d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_UART_MspInit+0xfc>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2034      	movs	r0, #52	; 0x34
 8000c36:	f000 f980 	bl	8000f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000c3a:	2034      	movs	r0, #52	; 0x34
 8000c3c:	f000 f999 	bl	8000f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40004c00 	.word	0x40004c00
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020800 	.word	0x40020800
 8000c54:	200001ec 	.word	0x200001ec
 8000c58:	40026040 	.word	0x40026040

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000c60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c62:	e003      	b.n	8000c6c <LoopCopyDataInit>

08000c64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c6a:	3104      	adds	r1, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c74:	d3f6      	bcc.n	8000c64 <CopyDataInit>
  ldr  r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c78:	e002      	b.n	8000c80 <LoopFillZerobss>

08000c7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000c7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c7c:	f842 3b04 	str.w	r3, [r2], #4

08000c80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c84:	d3f9      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c86:	f7ff feaf 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f002 fbf7 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fcaf 	bl	80005f0 <main>
  bx  lr
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c98:	08003ef4 	.word	0x08003ef4
  ldr  r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ca0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ca4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ca8:	20000254 	.word	0x20000254

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f923 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fd7c 	bl	80007e0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f93b 	bl	8000f8e <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 f903 	bl	8000f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_IncTick+0x1c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_IncTick+0x20>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <HAL_IncTick+0x20>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	20000008 	.word	0x20000008
 8000d74:	2000024c 	.word	0x2000024c

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <HAL_GetTick+0x10>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	2000024c 	.word	0x2000024c

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4906      	ldr	r1, [pc, #24]	; (8000e24 <__NVIC_EnableIRQ+0x34>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef0:	d301      	bcc.n	8000ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00f      	b.n	8000f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <SysTick_Config+0x40>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efe:	210f      	movs	r1, #15
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f7ff ff90 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <SysTick_Config+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <SysTick_Config+0x40>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff2d 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4c:	f7ff ff42 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff90 	bl	8000e7c <NVIC_EncodePriority>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff5f 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff35 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffa2 	bl	8000ee0 <SysTick_Config>
 8000f9c:	4603      	mov	r3, r0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff fee0 	bl	8000d78 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e099      	b.n	80010f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0201 	bic.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe4:	e00f      	b.n	8001006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fe6:	f7ff fec7 	bl	8000d78 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d908      	bls.n	8001006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e078      	b.n	80010f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e8      	bne.n	8000fe6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	4b38      	ldr	r3, [pc, #224]	; (8001100 <HAL_DMA_Init+0x158>)
 8001020:	4013      	ands	r3, r2
 8001022:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800103e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4313      	orrs	r3, r2
 8001056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	2b04      	cmp	r3, #4
 800105e:	d107      	bne.n	8001070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	4313      	orrs	r3, r2
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4313      	orrs	r3, r2
 800106e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f023 0307 	bic.w	r3, r3, #7
 8001086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	4313      	orrs	r3, r2
 8001090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	2b04      	cmp	r3, #4
 8001098:	d117      	bne.n	80010ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00e      	beq.n	80010ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 fa8f 	bl	80015d0 <DMA_CheckFifoParam>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2240      	movs	r2, #64	; 0x40
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010c6:	2301      	movs	r3, #1
 80010c8:	e016      	b.n	80010f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 fa48 	bl	8001568 <DMA_CalcBaseAndBitshift>
 80010d8:	4603      	mov	r3, r0
 80010da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e0:	223f      	movs	r2, #63	; 0x3f
 80010e2:	409a      	lsls	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	f010803f 	.word	0xf010803f

08001104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <HAL_DMA_Start_IT+0x26>
 8001126:	2302      	movs	r3, #2
 8001128:	e040      	b.n	80011ac <HAL_DMA_Start_IT+0xa8>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d12f      	bne.n	800119e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2202      	movs	r2, #2
 8001142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 f9da 	bl	800150c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115c:	223f      	movs	r2, #63	; 0x3f
 800115e:	409a      	lsls	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0216 	orr.w	r2, r2, #22
 8001172:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0208 	orr.w	r2, r2, #8
 800118a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e005      	b.n	80011aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011a6:	2302      	movs	r3, #2
 80011a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d004      	beq.n	80011d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00c      	b.n	80011ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2205      	movs	r2, #5
 80011d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0201 	bic.w	r2, r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001204:	4b92      	ldr	r3, [pc, #584]	; (8001450 <HAL_DMA_IRQHandler+0x258>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a92      	ldr	r2, [pc, #584]	; (8001454 <HAL_DMA_IRQHandler+0x25c>)
 800120a:	fba2 2303 	umull	r2, r3, r2, r3
 800120e:	0a9b      	lsrs	r3, r3, #10
 8001210:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001222:	2208      	movs	r2, #8
 8001224:	409a      	lsls	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d01a      	beq.n	8001264 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0204 	bic.w	r2, r2, #4
 800124a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001250:	2208      	movs	r2, #8
 8001252:	409a      	lsls	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001268:	2201      	movs	r2, #1
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d012      	beq.n	800129a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001286:	2201      	movs	r2, #1
 8001288:	409a      	lsls	r2, r3
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	f043 0202 	orr.w	r2, r3, #2
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129e:	2204      	movs	r2, #4
 80012a0:	409a      	lsls	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d012      	beq.n	80012d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00b      	beq.n	80012d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012bc:	2204      	movs	r2, #4
 80012be:	409a      	lsls	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c8:	f043 0204 	orr.w	r2, r3, #4
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d4:	2210      	movs	r2, #16
 80012d6:	409a      	lsls	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d043      	beq.n	8001368 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d03c      	beq.n	8001368 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f2:	2210      	movs	r2, #16
 80012f4:	409a      	lsls	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d018      	beq.n	800133a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d108      	bne.n	8001328 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b00      	cmp	r3, #0
 800131c:	d024      	beq.n	8001368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	4798      	blx	r3
 8001326:	e01f      	b.n	8001368 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132c:	2b00      	cmp	r3, #0
 800132e:	d01b      	beq.n	8001368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	4798      	blx	r3
 8001338:	e016      	b.n	8001368 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d107      	bne.n	8001358 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0208 	bic.w	r2, r2, #8
 8001356:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136c:	2220      	movs	r2, #32
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 808e 	beq.w	8001496 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8086 	beq.w	8001496 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138e:	2220      	movs	r2, #32
 8001390:	409a      	lsls	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d136      	bne.n	8001410 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0216 	bic.w	r2, r2, #22
 80013b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d103      	bne.n	80013d2 <HAL_DMA_IRQHandler+0x1da>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0208 	bic.w	r2, r2, #8
 80013e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e6:	223f      	movs	r2, #63	; 0x3f
 80013e8:	409a      	lsls	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001402:	2b00      	cmp	r3, #0
 8001404:	d07d      	beq.n	8001502 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	4798      	blx	r3
        }
        return;
 800140e:	e078      	b.n	8001502 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d01c      	beq.n	8001458 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d108      	bne.n	800143e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	2b00      	cmp	r3, #0
 8001432:	d030      	beq.n	8001496 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
 800143c:	e02b      	b.n	8001496 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001442:	2b00      	cmp	r3, #0
 8001444:	d027      	beq.n	8001496 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
 800144e:	e022      	b.n	8001496 <HAL_DMA_IRQHandler+0x29e>
 8001450:	20000000 	.word	0x20000000
 8001454:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0210 	bic.w	r2, r2, #16
 8001474:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	2b00      	cmp	r3, #0
 800149c:	d032      	beq.n	8001504 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d022      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2205      	movs	r2, #5
 80014ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d307      	bcc.n	80014de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f2      	bne.n	80014c2 <HAL_DMA_IRQHandler+0x2ca>
 80014dc:	e000      	b.n	80014e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80014de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
 8001500:	e000      	b.n	8001504 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001502:	bf00      	nop
    }
  }
}
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop

0800150c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001528:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b40      	cmp	r3, #64	; 0x40
 8001538:	d108      	bne.n	800154c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800154a:	e007      	b.n	800155c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	60da      	str	r2, [r3, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
	...

08001568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3b10      	subs	r3, #16
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <DMA_CalcBaseAndBitshift+0x60>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <DMA_CalcBaseAndBitshift+0x64>)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d909      	bls.n	80015aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800159e:	f023 0303 	bic.w	r3, r3, #3
 80015a2:	1d1a      	adds	r2, r3, #4
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	659a      	str	r2, [r3, #88]	; 0x58
 80015a8:	e007      	b.n	80015ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015b2:	f023 0303 	bic.w	r3, r3, #3
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	aaaaaaab 	.word	0xaaaaaaab
 80015cc:	08003e78 	.word	0x08003e78

080015d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d11f      	bne.n	800162a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d855      	bhi.n	800169c <DMA_CheckFifoParam+0xcc>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <DMA_CheckFifoParam+0x28>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001609 	.word	0x08001609
 80015fc:	0800161b 	.word	0x0800161b
 8001600:	08001609 	.word	0x08001609
 8001604:	0800169d 	.word	0x0800169d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d045      	beq.n	80016a0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001618:	e042      	b.n	80016a0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001622:	d13f      	bne.n	80016a4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001628:	e03c      	b.n	80016a4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001632:	d121      	bne.n	8001678 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d836      	bhi.n	80016a8 <DMA_CheckFifoParam+0xd8>
 800163a:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <DMA_CheckFifoParam+0x70>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001651 	.word	0x08001651
 8001644:	08001657 	.word	0x08001657
 8001648:	08001651 	.word	0x08001651
 800164c:	08001669 	.word	0x08001669
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
      break;
 8001654:	e02f      	b.n	80016b6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d024      	beq.n	80016ac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001666:	e021      	b.n	80016ac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001670:	d11e      	bne.n	80016b0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001676:	e01b      	b.n	80016b0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d902      	bls.n	8001684 <DMA_CheckFifoParam+0xb4>
 800167e:	2b03      	cmp	r3, #3
 8001680:	d003      	beq.n	800168a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001682:	e018      	b.n	80016b6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
      break;
 8001688:	e015      	b.n	80016b6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00e      	beq.n	80016b4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
      break;
 800169a:	e00b      	b.n	80016b4 <DMA_CheckFifoParam+0xe4>
      break;
 800169c:	bf00      	nop
 800169e:	e00a      	b.n	80016b6 <DMA_CheckFifoParam+0xe6>
      break;
 80016a0:	bf00      	nop
 80016a2:	e008      	b.n	80016b6 <DMA_CheckFifoParam+0xe6>
      break;
 80016a4:	bf00      	nop
 80016a6:	e006      	b.n	80016b6 <DMA_CheckFifoParam+0xe6>
      break;
 80016a8:	bf00      	nop
 80016aa:	e004      	b.n	80016b6 <DMA_CheckFifoParam+0xe6>
      break;
 80016ac:	bf00      	nop
 80016ae:	e002      	b.n	80016b6 <DMA_CheckFifoParam+0xe6>
      break;   
 80016b0:	bf00      	nop
 80016b2:	e000      	b.n	80016b6 <DMA_CheckFifoParam+0xe6>
      break;
 80016b4:	bf00      	nop
    }
  } 
  
  return status; 
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e16f      	b.n	80019b4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8161 	beq.w	80019ae <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d00b      	beq.n	800170c <HAL_GPIO_Init+0x48>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d007      	beq.n	800170c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001700:	2b11      	cmp	r3, #17
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b12      	cmp	r3, #18
 800170a:	d130      	bne.n	800176e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001742:	2201      	movs	r2, #1
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	f003 0201 	and.w	r2, r3, #1
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0xea>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b12      	cmp	r3, #18
 80017ac:	d123      	bne.n	80017f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	6939      	ldr	r1, [r7, #16]
 80017f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0203 	and.w	r2, r3, #3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80bb 	beq.w	80019ae <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	4b64      	ldr	r3, [pc, #400]	; (80019d0 <HAL_GPIO_Init+0x30c>)
 800183e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001840:	4a63      	ldr	r2, [pc, #396]	; (80019d0 <HAL_GPIO_Init+0x30c>)
 8001842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001846:	6453      	str	r3, [r2, #68]	; 0x44
 8001848:	4b61      	ldr	r3, [pc, #388]	; (80019d0 <HAL_GPIO_Init+0x30c>)
 800184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001854:	4a5f      	ldr	r2, [pc, #380]	; (80019d4 <HAL_GPIO_Init+0x310>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <HAL_GPIO_Init+0x314>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d031      	beq.n	80018e4 <HAL_GPIO_Init+0x220>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a56      	ldr	r2, [pc, #344]	; (80019dc <HAL_GPIO_Init+0x318>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d02b      	beq.n	80018e0 <HAL_GPIO_Init+0x21c>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a55      	ldr	r2, [pc, #340]	; (80019e0 <HAL_GPIO_Init+0x31c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d025      	beq.n	80018dc <HAL_GPIO_Init+0x218>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a54      	ldr	r2, [pc, #336]	; (80019e4 <HAL_GPIO_Init+0x320>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d01f      	beq.n	80018d8 <HAL_GPIO_Init+0x214>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a53      	ldr	r2, [pc, #332]	; (80019e8 <HAL_GPIO_Init+0x324>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d019      	beq.n	80018d4 <HAL_GPIO_Init+0x210>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_GPIO_Init+0x328>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d013      	beq.n	80018d0 <HAL_GPIO_Init+0x20c>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <HAL_GPIO_Init+0x32c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00d      	beq.n	80018cc <HAL_GPIO_Init+0x208>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <HAL_GPIO_Init+0x330>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d007      	beq.n	80018c8 <HAL_GPIO_Init+0x204>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a4f      	ldr	r2, [pc, #316]	; (80019f8 <HAL_GPIO_Init+0x334>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_GPIO_Init+0x200>
 80018c0:	2308      	movs	r3, #8
 80018c2:	e010      	b.n	80018e6 <HAL_GPIO_Init+0x222>
 80018c4:	2309      	movs	r3, #9
 80018c6:	e00e      	b.n	80018e6 <HAL_GPIO_Init+0x222>
 80018c8:	2307      	movs	r3, #7
 80018ca:	e00c      	b.n	80018e6 <HAL_GPIO_Init+0x222>
 80018cc:	2306      	movs	r3, #6
 80018ce:	e00a      	b.n	80018e6 <HAL_GPIO_Init+0x222>
 80018d0:	2305      	movs	r3, #5
 80018d2:	e008      	b.n	80018e6 <HAL_GPIO_Init+0x222>
 80018d4:	2304      	movs	r3, #4
 80018d6:	e006      	b.n	80018e6 <HAL_GPIO_Init+0x222>
 80018d8:	2303      	movs	r3, #3
 80018da:	e004      	b.n	80018e6 <HAL_GPIO_Init+0x222>
 80018dc:	2302      	movs	r3, #2
 80018de:	e002      	b.n	80018e6 <HAL_GPIO_Init+0x222>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_GPIO_Init+0x222>
 80018e4:	2300      	movs	r3, #0
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	f002 0203 	and.w	r2, r2, #3
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	4093      	lsls	r3, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018f8:	4936      	ldr	r1, [pc, #216]	; (80019d4 <HAL_GPIO_Init+0x310>)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_GPIO_Init+0x338>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800192a:	4a34      	ldr	r2, [pc, #208]	; (80019fc <HAL_GPIO_Init+0x338>)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_GPIO_Init+0x338>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001954:	4a29      	ldr	r2, [pc, #164]	; (80019fc <HAL_GPIO_Init+0x338>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_GPIO_Init+0x338>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800197e:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <HAL_GPIO_Init+0x338>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_GPIO_Init+0x338>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <HAL_GPIO_Init+0x338>)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa22 f303 	lsr.w	r3, r2, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f47f ae88 	bne.w	80016d4 <HAL_GPIO_Init+0x10>
  }
}
 80019c4:	bf00      	nop
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40013800 	.word	0x40013800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40021400 	.word	0x40021400
 80019f0:	40021800 	.word	0x40021800
 80019f4:	40021c00 	.word	0x40021c00
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40013c00 	.word	0x40013c00

08001a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a10:	787b      	ldrb	r3, [r7, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a1c:	e003      	b.n	8001a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	041a      	lsls	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	619a      	str	r2, [r3, #24]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e237      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d050      	beq.n	8001af0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a4e:	4ba3      	ldr	r3, [pc, #652]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d00c      	beq.n	8001a74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5a:	4ba0      	ldr	r3, [pc, #640]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d112      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a66:	4b9d      	ldr	r3, [pc, #628]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a72:	d10b      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	4b99      	ldr	r3, [pc, #612]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d036      	beq.n	8001aee <HAL_RCC_OscConfig+0xbe>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d132      	bne.n	8001aee <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e212      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4b93      	ldr	r3, [pc, #588]	; (8001ce0 <HAL_RCC_OscConfig+0x2b0>)
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d013      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff f96b 	bl	8000d78 <HAL_GetTick>
 8001aa2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa6:	f7ff f967 	bl	8000d78 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b64      	cmp	r3, #100	; 0x64
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1fc      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab8:	4b88      	ldr	r3, [pc, #544]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x76>
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f957 	bl	8000d78 <HAL_GetTick>
 8001aca:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ace:	f7ff f953 	bl	8000d78 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1e8      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae0:	4b7e      	ldr	r3, [pc, #504]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x9e>
 8001aec:	e000      	b.n	8001af0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d077      	beq.n	8001bec <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001afc:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00b      	beq.n	8001b20 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b08:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d126      	bne.n	8001b62 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b14:	4b71      	ldr	r3, [pc, #452]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d120      	bne.n	8001b62 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b20:	4b6e      	ldr	r3, [pc, #440]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x108>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e1bc      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	21f8      	movs	r1, #248	; 0xf8
 8001b46:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	69b9      	ldr	r1, [r7, #24]
 8001b4a:	fa91 f1a1 	rbit	r1, r1
 8001b4e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b50:	6979      	ldr	r1, [r7, #20]
 8001b52:	fab1 f181 	clz	r1, r1
 8001b56:	b2c9      	uxtb	r1, r1
 8001b58:	408b      	lsls	r3, r1
 8001b5a:	4960      	ldr	r1, [pc, #384]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b60:	e044      	b.n	8001bec <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d02a      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <HAL_RCC_OscConfig+0x2b4>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff f902 	bl	8000d78 <HAL_GetTick>
 8001b74:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b78:	f7ff f8fe 	bl	8000d78 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e193      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	21f8      	movs	r1, #248	; 0xf8
 8001ba4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	6939      	ldr	r1, [r7, #16]
 8001ba8:	fa91 f1a1 	rbit	r1, r1
 8001bac:	60f9      	str	r1, [r7, #12]
  return result;
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	fab1 f181 	clz	r1, r1
 8001bb4:	b2c9      	uxtb	r1, r1
 8001bb6:	408b      	lsls	r3, r1
 8001bb8:	4948      	ldr	r1, [pc, #288]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]
 8001bbe:	e015      	b.n	8001bec <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc0:	4b48      	ldr	r3, [pc, #288]	; (8001ce4 <HAL_RCC_OscConfig+0x2b4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff f8d7 	bl	8000d78 <HAL_GetTick>
 8001bca:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bce:	f7ff f8d3 	bl	8000d78 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e168      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be0:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d030      	beq.n	8001c5a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d016      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c00:	4b39      	ldr	r3, [pc, #228]	; (8001ce8 <HAL_RCC_OscConfig+0x2b8>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7ff f8b7 	bl	8000d78 <HAL_GetTick>
 8001c0a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0e:	f7ff f8b3 	bl	8000d78 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e148      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c20:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1de>
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <HAL_RCC_OscConfig+0x2b8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7ff f8a0 	bl	8000d78 <HAL_GetTick>
 8001c38:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff f89c 	bl	8000d78 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e131      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8088 	beq.w	8001d78 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d110      	bne.n	8001c9c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a16      	ldr	r2, [pc, #88]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_RCC_OscConfig+0x2bc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_RCC_OscConfig+0x2bc>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_OscConfig+0x2bc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d123      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_OscConfig+0x2bc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <HAL_RCC_OscConfig+0x2bc>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f85a 	bl	8000d78 <HAL_GetTick>
 8001cc4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	e013      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc8:	f7ff f856 	bl	8000d78 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d90c      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0eb      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40023802 	.word	0x40023802
 8001ce4:	42470000 	.word	0x42470000
 8001ce8:	42470e80 	.word	0x42470e80
 8001cec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	4b72      	ldr	r3, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x48c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0e5      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b6f      	ldr	r3, [pc, #444]	; (8001ec0 <HAL_RCC_OscConfig+0x490>)
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d015      	beq.n	8001d3a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff f833 	bl	8000d78 <HAL_GetTick>
 8001d12:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff f82f 	bl	8000d78 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0c2      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ee      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2e6>
 8001d38:	e014      	b.n	8001d64 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f81d 	bl	8000d78 <HAL_GetTick>
 8001d3e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff f819 	bl	8000d78 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0ac      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ee      	bne.n	8001d42 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d105      	bne.n	8001d78 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6c:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	4a54      	ldr	r2, [pc, #336]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8097 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d82:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d061      	beq.n	8001e52 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d146      	bne.n	8001e24 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_RCC_OscConfig+0x498>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7fe ffec 	bl	8000d78 <HAL_GetTick>
 8001da0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe ffe8 	bl	8000d78 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e07d      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc2:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_OscConfig+0x49c>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	69d1      	ldr	r1, [r2, #28]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6a12      	ldr	r2, [r2, #32]
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dd8:	0192      	lsls	r2, r2, #6
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001de0:	0612      	lsls	r2, r2, #24
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001de8:	0852      	lsrs	r2, r2, #1
 8001dea:	3a01      	subs	r2, #1
 8001dec:	0412      	lsls	r2, r2, #16
 8001dee:	430a      	orrs	r2, r1
 8001df0:	4934      	ldr	r1, [pc, #208]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_RCC_OscConfig+0x498>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7fe ffbc 	bl	8000d78 <HAL_GetTick>
 8001e00:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e04:	f7fe ffb8 	bl	8000d78 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e04d      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x3d4>
 8001e22:	e045      	b.n	8001eb0 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_RCC_OscConfig+0x498>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7fe ffa5 	bl	8000d78 <HAL_GetTick>
 8001e2e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e32:	f7fe ffa1 	bl	8000d78 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b64      	cmp	r3, #100	; 0x64
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e036      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e44:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x402>
 8001e50:	e02e      	b.n	8001eb0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e029      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_OscConfig+0x494>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d11c      	bne.n	8001eac <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d115      	bne.n	8001eac <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d10d      	bne.n	8001eac <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3728      	adds	r7, #40	; 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	40023870 	.word	0x40023870
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	42470060 	.word	0x42470060
 8001ecc:	f0bc8000 	.word	0xf0bc8000

08001ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0d2      	b.n	800208a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b6b      	ldr	r3, [pc, #428]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d90c      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b68      	ldr	r3, [pc, #416]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0be      	b.n	800208a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a5b      	ldr	r2, [pc, #364]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001f3c:	4b56      	ldr	r3, [pc, #344]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a55      	ldr	r2, [pc, #340]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4950      	ldr	r1, [pc, #320]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d040      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d115      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e085      	b.n	800208a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f86:	4b44      	ldr	r3, [pc, #272]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e079      	b.n	800208a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b40      	ldr	r3, [pc, #256]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e071      	b.n	800208a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4939      	ldr	r1, [pc, #228]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fede 	bl	8000d78 <HAL_GetTick>
 8001fbc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7fe feda 	bl	8000d78 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e059      	b.n	800208a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b30      	ldr	r3, [pc, #192]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 020c 	and.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d20c      	bcs.n	8002010 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e03c      	b.n	800208a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	491b      	ldr	r1, [pc, #108]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4913      	ldr	r1, [pc, #76]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800204e:	f000 f82b 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002052:	4601      	mov	r1, r0
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205c:	22f0      	movs	r2, #240	; 0xf0
 800205e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	fa92 f2a2 	rbit	r2, r2
 8002066:	60fa      	str	r2, [r7, #12]
  return result;
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	40d3      	lsrs	r3, r2
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x1cc>)
 8002074:	5cd3      	ldrb	r3, [r2, r3]
 8002076:	fa21 f303 	lsr.w	r3, r1, r3
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1d0>)
 800207c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fe36 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00
 8002098:	40023800 	.word	0x40023800
 800209c:	08003e60 	.word	0x08003e60
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000004 	.word	0x20000004

080020a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	2300      	movs	r3, #0
 80020b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020be:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_GetSysClockFreq+0x158>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d007      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x32>
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d008      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x38>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 808d 	bne.w	80021ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <HAL_RCC_GetSysClockFreq+0x15c>)
 80020d6:	60bb      	str	r3, [r7, #8]
       break;
 80020d8:	e08c      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020da:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <HAL_RCC_GetSysClockFreq+0x160>)
 80020dc:	60bb      	str	r3, [r7, #8]
      break;
 80020de:	e089      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e0:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_GetSysClockFreq+0x158>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <HAL_RCC_GetSysClockFreq+0x158>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d023      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f6:	4b42      	ldr	r3, [pc, #264]	; (8002200 <HAL_RCC_GetSysClockFreq+0x158>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	f04f 0400 	mov.w	r4, #0
 8002100:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	ea03 0501 	and.w	r5, r3, r1
 800210c:	ea04 0602 	and.w	r6, r4, r2
 8002110:	4a3d      	ldr	r2, [pc, #244]	; (8002208 <HAL_RCC_GetSysClockFreq+0x160>)
 8002112:	fb02 f106 	mul.w	r1, r2, r6
 8002116:	2200      	movs	r2, #0
 8002118:	fb02 f205 	mul.w	r2, r2, r5
 800211c:	440a      	add	r2, r1
 800211e:	493a      	ldr	r1, [pc, #232]	; (8002208 <HAL_RCC_GetSysClockFreq+0x160>)
 8002120:	fba5 0101 	umull	r0, r1, r5, r1
 8002124:	1853      	adds	r3, r2, r1
 8002126:	4619      	mov	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f04f 0400 	mov.w	r4, #0
 800212e:	461a      	mov	r2, r3
 8002130:	4623      	mov	r3, r4
 8002132:	f7fe f84f 	bl	80001d4 <__aeabi_uldivmod>
 8002136:	4603      	mov	r3, r0
 8002138:	460c      	mov	r4, r1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e049      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213e:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCC_GetSysClockFreq+0x158>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	f04f 0400 	mov.w	r4, #0
 8002148:	f240 11ff 	movw	r1, #511	; 0x1ff
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	ea03 0501 	and.w	r5, r3, r1
 8002154:	ea04 0602 	and.w	r6, r4, r2
 8002158:	4629      	mov	r1, r5
 800215a:	4632      	mov	r2, r6
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	f04f 0400 	mov.w	r4, #0
 8002164:	0154      	lsls	r4, r2, #5
 8002166:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800216a:	014b      	lsls	r3, r1, #5
 800216c:	4619      	mov	r1, r3
 800216e:	4622      	mov	r2, r4
 8002170:	1b49      	subs	r1, r1, r5
 8002172:	eb62 0206 	sbc.w	r2, r2, r6
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f04f 0400 	mov.w	r4, #0
 800217e:	0194      	lsls	r4, r2, #6
 8002180:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002184:	018b      	lsls	r3, r1, #6
 8002186:	1a5b      	subs	r3, r3, r1
 8002188:	eb64 0402 	sbc.w	r4, r4, r2
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	00e2      	lsls	r2, r4, #3
 8002196:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800219a:	00d9      	lsls	r1, r3, #3
 800219c:	460b      	mov	r3, r1
 800219e:	4614      	mov	r4, r2
 80021a0:	195b      	adds	r3, r3, r5
 80021a2:	eb44 0406 	adc.w	r4, r4, r6
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	02a2      	lsls	r2, r4, #10
 80021b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021b4:	0299      	lsls	r1, r3, #10
 80021b6:	460b      	mov	r3, r1
 80021b8:	4614      	mov	r4, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	4621      	mov	r1, r4
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f04f 0400 	mov.w	r4, #0
 80021c4:	461a      	mov	r2, r3
 80021c6:	4623      	mov	r3, r4
 80021c8:	f7fe f804 	bl	80001d4 <__aeabi_uldivmod>
 80021cc:	4603      	mov	r3, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_GetSysClockFreq+0x158>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	3301      	adds	r3, #1
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	60bb      	str	r3, [r7, #8]
      break;
 80021ec:	e002      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetSysClockFreq+0x15c>)
 80021f0:	60bb      	str	r3, [r7, #8]
      break;
 80021f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f4:	68bb      	ldr	r3, [r7, #8]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	00f42400 	.word	0x00f42400
 8002208:	017d7840 	.word	0x017d7840

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b02      	ldr	r3, [pc, #8]	; (800221c <HAL_RCC_GetHCLKFreq+0x10>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000000 	.word	0x20000000

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002226:	f7ff fff1 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222a:	4601      	mov	r1, r0
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002234:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002238:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	fa92 f2a2 	rbit	r2, r2
 8002240:	603a      	str	r2, [r7, #0]
  return result;
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	40d3      	lsrs	r3, r2
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x40>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	08003e70 	.word	0x08003e70

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800226a:	f7ff ffcf 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800226e:	4601      	mov	r1, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002278:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800227c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	fa92 f2a2 	rbit	r2, r2
 8002284:	603a      	str	r2, [r7, #0]
  return result;
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	fab2 f282 	clz	r2, r2
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	40d3      	lsrs	r3, r2
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002292:	5cd3      	ldrb	r3, [r2, r3]
 8002294:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	08003e70 	.word	0x08003e70

080022a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e041      	b.n	800233e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe fbf8 	bl	8000ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f000 f926 	bl	8002538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_TIM_ConfigClockSource+0x18>
 800235a:	2302      	movs	r3, #2
 800235c:	e0a6      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x166>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800237c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002384:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b40      	cmp	r3, #64	; 0x40
 8002394:	d067      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x120>
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d80b      	bhi.n	80023b2 <HAL_TIM_ConfigClockSource+0x6c>
 800239a:	2b10      	cmp	r3, #16
 800239c:	d073      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x140>
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d802      	bhi.n	80023a8 <HAL_TIM_ConfigClockSource+0x62>
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d06f      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023a6:	e078      	b.n	800249a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d06c      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x140>
 80023ac:	2b30      	cmp	r3, #48	; 0x30
 80023ae:	d06a      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80023b0:	e073      	b.n	800249a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023b2:	2b70      	cmp	r3, #112	; 0x70
 80023b4:	d00d      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x8c>
 80023b6:	2b70      	cmp	r3, #112	; 0x70
 80023b8:	d804      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x7e>
 80023ba:	2b50      	cmp	r3, #80	; 0x50
 80023bc:	d033      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0xe0>
 80023be:	2b60      	cmp	r3, #96	; 0x60
 80023c0:	d041      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80023c2:	e06a      	b.n	800249a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	d066      	beq.n	8002498 <HAL_TIM_ConfigClockSource+0x152>
 80023ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ce:	d017      	beq.n	8002400 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80023d0:	e063      	b.n	800249a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f000 fa44 	bl	800286e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	609a      	str	r2, [r3, #8]
      break;
 80023fe:	e04c      	b.n	800249a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f000 fa2d 	bl	800286e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002422:	609a      	str	r2, [r3, #8]
      break;
 8002424:	e039      	b.n	800249a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	461a      	mov	r2, r3
 8002434:	f000 f9a4 	bl	8002780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2150      	movs	r1, #80	; 0x50
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f9fb 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 8002444:	e029      	b.n	800249a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	461a      	mov	r2, r3
 8002454:	f000 f9c2 	bl	80027dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2160      	movs	r1, #96	; 0x60
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f9eb 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 8002464:	e019      	b.n	800249a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	f000 f984 	bl	8002780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2140      	movs	r1, #64	; 0x40
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f9db 	bl	800283a <TIM_ITRx_SetConfig>
      break;
 8002484:	e009      	b.n	800249a <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	4610      	mov	r0, r2
 8002492:	f000 f9d2 	bl	800283a <TIM_ITRx_SetConfig>
        break;
 8002496:	e000      	b.n	800249a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002498:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e031      	b.n	8002530 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8c8 	bl	8002674 <TIM_SlaveTimer_SetConfig>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e018      	b.n	8002530 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800250c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800251c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a3f      	ldr	r2, [pc, #252]	; (8002648 <TIM_Base_SetConfig+0x110>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d013      	beq.n	8002578 <TIM_Base_SetConfig+0x40>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d00f      	beq.n	8002578 <TIM_Base_SetConfig+0x40>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a3c      	ldr	r2, [pc, #240]	; (800264c <TIM_Base_SetConfig+0x114>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00b      	beq.n	8002578 <TIM_Base_SetConfig+0x40>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <TIM_Base_SetConfig+0x118>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d007      	beq.n	8002578 <TIM_Base_SetConfig+0x40>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a3a      	ldr	r2, [pc, #232]	; (8002654 <TIM_Base_SetConfig+0x11c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d003      	beq.n	8002578 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a39      	ldr	r2, [pc, #228]	; (8002658 <TIM_Base_SetConfig+0x120>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d108      	bne.n	800258a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a2e      	ldr	r2, [pc, #184]	; (8002648 <TIM_Base_SetConfig+0x110>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d02b      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002598:	d027      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a2b      	ldr	r2, [pc, #172]	; (800264c <TIM_Base_SetConfig+0x114>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d023      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a2a      	ldr	r2, [pc, #168]	; (8002650 <TIM_Base_SetConfig+0x118>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01f      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a29      	ldr	r2, [pc, #164]	; (8002654 <TIM_Base_SetConfig+0x11c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01b      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a28      	ldr	r2, [pc, #160]	; (8002658 <TIM_Base_SetConfig+0x120>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d017      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a27      	ldr	r2, [pc, #156]	; (800265c <TIM_Base_SetConfig+0x124>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d013      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <TIM_Base_SetConfig+0x128>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00f      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a25      	ldr	r2, [pc, #148]	; (8002664 <TIM_Base_SetConfig+0x12c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00b      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a24      	ldr	r2, [pc, #144]	; (8002668 <TIM_Base_SetConfig+0x130>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a23      	ldr	r2, [pc, #140]	; (800266c <TIM_Base_SetConfig+0x134>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a22      	ldr	r2, [pc, #136]	; (8002670 <TIM_Base_SetConfig+0x138>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <TIM_Base_SetConfig+0x110>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_Base_SetConfig+0xf8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <TIM_Base_SetConfig+0x120>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d103      	bne.n	8002638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	615a      	str	r2, [r3, #20]
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	40010000 	.word	0x40010000
 800264c:	40000400 	.word	0x40000400
 8002650:	40000800 	.word	0x40000800
 8002654:	40000c00 	.word	0x40000c00
 8002658:	40010400 	.word	0x40010400
 800265c:	40014000 	.word	0x40014000
 8002660:	40014400 	.word	0x40014400
 8002664:	40014800 	.word	0x40014800
 8002668:	40001800 	.word	0x40001800
 800266c:	40001c00 	.word	0x40001c00
 8002670:	40002000 	.word	0x40002000

08002674 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f023 0307 	bic.w	r3, r3, #7
 800269e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b30      	cmp	r3, #48	; 0x30
 80026b8:	d05c      	beq.n	8002774 <TIM_SlaveTimer_SetConfig+0x100>
 80026ba:	2b30      	cmp	r3, #48	; 0x30
 80026bc:	d806      	bhi.n	80026cc <TIM_SlaveTimer_SetConfig+0x58>
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d058      	beq.n	8002774 <TIM_SlaveTimer_SetConfig+0x100>
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d056      	beq.n	8002774 <TIM_SlaveTimer_SetConfig+0x100>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d054      	beq.n	8002774 <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80026ca:	e054      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80026cc:	2b50      	cmp	r3, #80	; 0x50
 80026ce:	d03d      	beq.n	800274c <TIM_SlaveTimer_SetConfig+0xd8>
 80026d0:	2b50      	cmp	r3, #80	; 0x50
 80026d2:	d802      	bhi.n	80026da <TIM_SlaveTimer_SetConfig+0x66>
 80026d4:	2b40      	cmp	r3, #64	; 0x40
 80026d6:	d010      	beq.n	80026fa <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80026d8:	e04d      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80026da:	2b60      	cmp	r3, #96	; 0x60
 80026dc:	d040      	beq.n	8002760 <TIM_SlaveTimer_SetConfig+0xec>
 80026de:	2b70      	cmp	r3, #112	; 0x70
 80026e0:	d000      	beq.n	80026e4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80026e2:	e048      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68d9      	ldr	r1, [r3, #12]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	f000 f8bb 	bl	800286e <TIM_ETR_SetConfig>
      break;
 80026f8:	e03d      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d101      	bne.n	8002706 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e038      	b.n	8002778 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	621a      	str	r2, [r3, #32]
      break;
 800274a:	e014      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	461a      	mov	r2, r3
 800275a:	f000 f811 	bl	8002780 <TIM_TI1_ConfigInputStage>
      break;
 800275e:	e00a      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	461a      	mov	r2, r3
 800276e:	f000 f835 	bl	80027dc <TIM_TI2_ConfigInputStage>
      break;
 8002772:	e000      	b.n	8002776 <TIM_SlaveTimer_SetConfig+0x102>
        break;
 8002774:	bf00      	nop
  }
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	f023 0201 	bic.w	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f023 030a 	bic.w	r3, r3, #10
 80027bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	621a      	str	r2, [r3, #32]
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f023 0210 	bic.w	r2, r3, #16
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002806:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	031b      	lsls	r3, r3, #12
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002818:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	621a      	str	r2, [r3, #32]
}
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	f043 0307 	orr.w	r3, r3, #7
 800285c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800286e:	b480      	push	{r7}
 8002870:	b087      	sub	sp, #28
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002888:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	021a      	lsls	r2, r3, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	431a      	orrs	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4313      	orrs	r3, r2
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	609a      	str	r2, [r3, #8]
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e05a      	b.n	800297a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a20      	ldr	r2, [pc, #128]	; (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d01d      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d018      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1a      	ldr	r2, [pc, #104]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00e      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10c      	bne.n	8002968 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	4313      	orrs	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	40010000 	.word	0x40010000
 8002988:	40000400 	.word	0x40000400
 800298c:	40000800 	.word	0x40000800
 8002990:	40000c00 	.word	0x40000c00
 8002994:	40010400 	.word	0x40010400
 8002998:	40014000 	.word	0x40014000
 800299c:	40001800 	.word	0x40001800

080029a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e03f      	b.n	8002a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe f8c6 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fc59 	bl	800329c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b08a      	sub	sp, #40	; 0x28
 8002a3e:	af02      	add	r7, sp, #8
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d17c      	bne.n	8002b54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_UART_Transmit+0x2c>
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e075      	b.n	8002b56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_UART_Transmit+0x3e>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e06e      	b.n	8002b56 <HAL_UART_Transmit+0x11c>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2221      	movs	r2, #33	; 0x21
 8002a8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a8e:	f7fe f973 	bl	8000d78 <HAL_GetTick>
 8002a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	88fa      	ldrh	r2, [r7, #6]
 8002a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa8:	d108      	bne.n	8002abc <HAL_UART_Transmit+0x82>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	e003      	b.n	8002ac4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002acc:	e02a      	b.n	8002b24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fa68 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e036      	b.n	8002b56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3302      	adds	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e007      	b.n	8002b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	781a      	ldrb	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1cf      	bne.n	8002ace <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2140      	movs	r1, #64	; 0x40
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fa38 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e006      	b.n	8002b56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d166      	bne.n	8002c48 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_UART_Receive_DMA+0x26>
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e05f      	b.n	8002c4a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_UART_Receive_DMA+0x38>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e058      	b.n	8002c4a <HAL_UART_Receive_DMA+0xea>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	88fa      	ldrh	r2, [r7, #6]
 8002baa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2222      	movs	r2, #34	; 0x22
 8002bb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <HAL_UART_Receive_DMA+0xf4>)
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	4a24      	ldr	r2, [pc, #144]	; (8002c58 <HAL_UART_Receive_DMA+0xf8>)
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_UART_Receive_DMA+0xfc>)
 8002bd0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3304      	adds	r3, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	f7fe fa87 	bl	8001104 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c22:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c42:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002c48:	2302      	movs	r3, #2
  }
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	08002e97 	.word	0x08002e97
 8002c58:	08002eff 	.word	0x08002eff
 8002c5c:	08002f1b 	.word	0x08002f1b

08002c60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10d      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x52>
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa76 	bl	800319c <UART_Receive_IT>
      return;
 8002cb0:	e0d1      	b.n	8002e56 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80b0 	beq.w	8002e1a <HAL_UART_IRQHandler+0x1ba>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x70>
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80a5 	beq.w	8002e1a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x90>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_UART_IRQHandler+0xb0>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	f043 0202 	orr.w	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd0>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	f043 0204 	orr.w	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00f      	beq.n	8002d5a <HAL_UART_IRQHandler+0xfa>
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <HAL_UART_IRQHandler+0xee>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	f043 0208 	orr.w	r2, r3, #8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d078      	beq.n	8002e54 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_UART_IRQHandler+0x11c>
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa10 	bl	800319c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <HAL_UART_IRQHandler+0x144>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d031      	beq.n	8002e08 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f961 	bl	800306c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d123      	bne.n	8002e00 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd4:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_UART_IRQHandler+0x1fc>)
 8002dd6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe f9e9 	bl	80011b4 <HAL_DMA_Abort_IT>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d016      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002df2:	4610      	mov	r0, r2
 8002df4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df6:	e00e      	b.n	8002e16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f843 	bl	8002e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfe:	e00a      	b.n	8002e16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f83f 	bl	8002e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e06:	e006      	b.n	8002e16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f83b 	bl	8002e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e14:	e01e      	b.n	8002e54 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e16:	bf00      	nop
    return;
 8002e18:	e01c      	b.n	8002e54 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_UART_IRQHandler+0x1d6>
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f94d 	bl	80030ce <UART_Transmit_IT>
    return;
 8002e34:	e00f      	b.n	8002e56 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_UART_IRQHandler+0x1f6>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f98e 	bl	800316c <UART_EndTransmit_IT>
    return;
 8002e50:	bf00      	nop
 8002e52:	e000      	b.n	8002e56 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002e54:	bf00      	nop
  }
}
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	080030a7 	.word	0x080030a7

08002e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11e      	bne.n	8002ef0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7fd fc4b 	bl	800078c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff ffb0 	bl	8002e72 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	bf0c      	ite	eq
 8002f3a:	2301      	moveq	r3, #1
 8002f3c:	2300      	movne	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b21      	cmp	r3, #33	; 0x21
 8002f4c:	d108      	bne.n	8002f60 <UART_DMAError+0x46>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2200      	movs	r2, #0
 8002f58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002f5a:	68b8      	ldr	r0, [r7, #8]
 8002f5c:	f000 f871 	bl	8003042 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b22      	cmp	r3, #34	; 0x22
 8002f80:	d108      	bne.n	8002f94 <UART_DMAError+0x7a>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002f8e:	68b8      	ldr	r0, [r7, #8]
 8002f90:	f000 f86c 	bl	800306c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	f043 0210 	orr.w	r2, r3, #16
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fa0:	68b8      	ldr	r0, [r7, #8]
 8002fa2:	f7ff ff6f 	bl	8002e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fbe:	e02c      	b.n	800301a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d028      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x30>
 8002fce:	f7fd fed3 	bl	8000d78 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d21d      	bcs.n	800301a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e00f      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	429a      	cmp	r2, r3
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	429a      	cmp	r2, r3
 8003036:	d0c3      	beq.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003058:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003082:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7ff fedf 	bl	8002e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b21      	cmp	r3, #33	; 0x21
 80030e0:	d13e      	bne.n	8003160 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ea:	d114      	bne.n	8003116 <UART_Transmit_IT+0x48>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d110      	bne.n	8003116 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003108:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	621a      	str	r2, [r3, #32]
 8003114:	e008      	b.n	8003128 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	1c59      	adds	r1, r3, #1
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6211      	str	r1, [r2, #32]
 8003120:	781a      	ldrb	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29b      	uxth	r3, r3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4619      	mov	r1, r3
 8003136:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10f      	bne.n	800315c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800314a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800315a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003182:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fe67 	bl	8002e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b22      	cmp	r3, #34	; 0x22
 80031ae:	d170      	bne.n	8003292 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b8:	d117      	bne.n	80031ea <UART_Receive_IT+0x4e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d113      	bne.n	80031ea <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	1c9a      	adds	r2, r3, #2
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
 80031e8:	e026      	b.n	8003238 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fc:	d007      	beq.n	800320e <UART_Receive_IT+0x72>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <UART_Receive_IT+0x80>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	e008      	b.n	800322e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29b      	uxth	r3, r3
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4619      	mov	r1, r3
 8003246:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003248:	2b00      	cmp	r3, #0
 800324a:	d120      	bne.n	800328e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0220 	bic.w	r2, r2, #32
 800325a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800326a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fd fa81 	bl	800078c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e002      	b.n	8003294 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032dc:	f023 030c 	bic.w	r3, r3, #12
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	430b      	orrs	r3, r1
 80032e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a57      	ldr	r2, [pc, #348]	; (8003464 <UART_SetConfig+0x1c8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <UART_SetConfig+0x78>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a56      	ldr	r2, [pc, #344]	; (8003468 <UART_SetConfig+0x1cc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d103      	bne.n	800331c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003314:	f7fe ffa6 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	e002      	b.n	8003322 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7fe ff80 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003320:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332a:	d14c      	bne.n	80033c6 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009a      	lsls	r2, r3, #2
 8003336:	441a      	add	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	4a4a      	ldr	r2, [pc, #296]	; (800346c <UART_SetConfig+0x1d0>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	0119      	lsls	r1, r3, #4
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	009a      	lsls	r2, r3, #2
 8003356:	441a      	add	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003362:	4b42      	ldr	r3, [pc, #264]	; (800346c <UART_SetConfig+0x1d0>)
 8003364:	fba3 0302 	umull	r0, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	2064      	movs	r0, #100	; 0x64
 800336c:	fb00 f303 	mul.w	r3, r0, r3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	3332      	adds	r3, #50	; 0x32
 8003376:	4a3d      	ldr	r2, [pc, #244]	; (800346c <UART_SetConfig+0x1d0>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003384:	4419      	add	r1, r3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009a      	lsls	r2, r3, #2
 8003390:	441a      	add	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fbb2 f2f3 	udiv	r2, r2, r3
 800339c:	4b33      	ldr	r3, [pc, #204]	; (800346c <UART_SetConfig+0x1d0>)
 800339e:	fba3 0302 	umull	r0, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2064      	movs	r0, #100	; 0x64
 80033a6:	fb00 f303 	mul.w	r3, r0, r3
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	3332      	adds	r3, #50	; 0x32
 80033b0:	4a2e      	ldr	r2, [pc, #184]	; (800346c <UART_SetConfig+0x1d0>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	f003 0207 	and.w	r2, r3, #7
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	440a      	add	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033c4:	e04a      	b.n	800345c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009a      	lsls	r2, r3, #2
 80033d0:	441a      	add	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	4a23      	ldr	r2, [pc, #140]	; (800346c <UART_SetConfig+0x1d0>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	0119      	lsls	r1, r3, #4
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	009a      	lsls	r2, r3, #2
 80033f0:	441a      	add	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <UART_SetConfig+0x1d0>)
 80033fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2064      	movs	r0, #100	; 0x64
 8003406:	fb00 f303 	mul.w	r3, r0, r3
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	3332      	adds	r3, #50	; 0x32
 8003410:	4a16      	ldr	r2, [pc, #88]	; (800346c <UART_SetConfig+0x1d0>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341c:	4419      	add	r1, r3
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	009a      	lsls	r2, r3, #2
 8003428:	441a      	add	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	fbb2 f2f3 	udiv	r2, r2, r3
 8003434:	4b0d      	ldr	r3, [pc, #52]	; (800346c <UART_SetConfig+0x1d0>)
 8003436:	fba3 0302 	umull	r0, r3, r3, r2
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	2064      	movs	r0, #100	; 0x64
 800343e:	fb00 f303 	mul.w	r3, r0, r3
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	3332      	adds	r3, #50	; 0x32
 8003448:	4a08      	ldr	r2, [pc, #32]	; (800346c <UART_SetConfig+0x1d0>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	f003 020f 	and.w	r2, r3, #15
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	440a      	add	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40011000 	.word	0x40011000
 8003468:	40011400 	.word	0x40011400
 800346c:	51eb851f 	.word	0x51eb851f

08003470 <__errno>:
 8003470:	4b01      	ldr	r3, [pc, #4]	; (8003478 <__errno+0x8>)
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000000c 	.word	0x2000000c

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	2500      	movs	r5, #0
 8003480:	4e0c      	ldr	r6, [pc, #48]	; (80034b4 <__libc_init_array+0x38>)
 8003482:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003484:	1ba4      	subs	r4, r4, r6
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	42a5      	cmp	r5, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	f000 fca2 	bl	8003dd4 <_init>
 8003490:	2500      	movs	r5, #0
 8003492:	4e0a      	ldr	r6, [pc, #40]	; (80034bc <__libc_init_array+0x40>)
 8003494:	4c0a      	ldr	r4, [pc, #40]	; (80034c0 <__libc_init_array+0x44>)
 8003496:	1ba4      	subs	r4, r4, r6
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	42a5      	cmp	r5, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a4:	4798      	blx	r3
 80034a6:	3501      	adds	r5, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ae:	4798      	blx	r3
 80034b0:	3501      	adds	r5, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	08003eec 	.word	0x08003eec
 80034b8:	08003eec 	.word	0x08003eec
 80034bc:	08003eec 	.word	0x08003eec
 80034c0:	08003ef0 	.word	0x08003ef0

080034c4 <memset>:
 80034c4:	4603      	mov	r3, r0
 80034c6:	4402      	add	r2, r0
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d100      	bne.n	80034ce <memset+0xa>
 80034cc:	4770      	bx	lr
 80034ce:	f803 1b01 	strb.w	r1, [r3], #1
 80034d2:	e7f9      	b.n	80034c8 <memset+0x4>

080034d4 <_puts_r>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	460e      	mov	r6, r1
 80034d8:	4605      	mov	r5, r0
 80034da:	b118      	cbz	r0, 80034e4 <_puts_r+0x10>
 80034dc:	6983      	ldr	r3, [r0, #24]
 80034de:	b90b      	cbnz	r3, 80034e4 <_puts_r+0x10>
 80034e0:	f000 fa26 	bl	8003930 <__sinit>
 80034e4:	69ab      	ldr	r3, [r5, #24]
 80034e6:	68ac      	ldr	r4, [r5, #8]
 80034e8:	b913      	cbnz	r3, 80034f0 <_puts_r+0x1c>
 80034ea:	4628      	mov	r0, r5
 80034ec:	f000 fa20 	bl	8003930 <__sinit>
 80034f0:	4b23      	ldr	r3, [pc, #140]	; (8003580 <_puts_r+0xac>)
 80034f2:	429c      	cmp	r4, r3
 80034f4:	d117      	bne.n	8003526 <_puts_r+0x52>
 80034f6:	686c      	ldr	r4, [r5, #4]
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	071b      	lsls	r3, r3, #28
 80034fc:	d51d      	bpl.n	800353a <_puts_r+0x66>
 80034fe:	6923      	ldr	r3, [r4, #16]
 8003500:	b1db      	cbz	r3, 800353a <_puts_r+0x66>
 8003502:	3e01      	subs	r6, #1
 8003504:	68a3      	ldr	r3, [r4, #8]
 8003506:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800350a:	3b01      	subs	r3, #1
 800350c:	60a3      	str	r3, [r4, #8]
 800350e:	b9e9      	cbnz	r1, 800354c <_puts_r+0x78>
 8003510:	2b00      	cmp	r3, #0
 8003512:	da2e      	bge.n	8003572 <_puts_r+0x9e>
 8003514:	4622      	mov	r2, r4
 8003516:	210a      	movs	r1, #10
 8003518:	4628      	mov	r0, r5
 800351a:	f000 f859 	bl	80035d0 <__swbuf_r>
 800351e:	3001      	adds	r0, #1
 8003520:	d011      	beq.n	8003546 <_puts_r+0x72>
 8003522:	200a      	movs	r0, #10
 8003524:	e011      	b.n	800354a <_puts_r+0x76>
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <_puts_r+0xb0>)
 8003528:	429c      	cmp	r4, r3
 800352a:	d101      	bne.n	8003530 <_puts_r+0x5c>
 800352c:	68ac      	ldr	r4, [r5, #8]
 800352e:	e7e3      	b.n	80034f8 <_puts_r+0x24>
 8003530:	4b15      	ldr	r3, [pc, #84]	; (8003588 <_puts_r+0xb4>)
 8003532:	429c      	cmp	r4, r3
 8003534:	bf08      	it	eq
 8003536:	68ec      	ldreq	r4, [r5, #12]
 8003538:	e7de      	b.n	80034f8 <_puts_r+0x24>
 800353a:	4621      	mov	r1, r4
 800353c:	4628      	mov	r0, r5
 800353e:	f000 f899 	bl	8003674 <__swsetup_r>
 8003542:	2800      	cmp	r0, #0
 8003544:	d0dd      	beq.n	8003502 <_puts_r+0x2e>
 8003546:	f04f 30ff 	mov.w	r0, #4294967295
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	2b00      	cmp	r3, #0
 800354e:	da04      	bge.n	800355a <_puts_r+0x86>
 8003550:	69a2      	ldr	r2, [r4, #24]
 8003552:	429a      	cmp	r2, r3
 8003554:	dc06      	bgt.n	8003564 <_puts_r+0x90>
 8003556:	290a      	cmp	r1, #10
 8003558:	d004      	beq.n	8003564 <_puts_r+0x90>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	6022      	str	r2, [r4, #0]
 8003560:	7019      	strb	r1, [r3, #0]
 8003562:	e7cf      	b.n	8003504 <_puts_r+0x30>
 8003564:	4622      	mov	r2, r4
 8003566:	4628      	mov	r0, r5
 8003568:	f000 f832 	bl	80035d0 <__swbuf_r>
 800356c:	3001      	adds	r0, #1
 800356e:	d1c9      	bne.n	8003504 <_puts_r+0x30>
 8003570:	e7e9      	b.n	8003546 <_puts_r+0x72>
 8003572:	200a      	movs	r0, #10
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	6022      	str	r2, [r4, #0]
 800357a:	7018      	strb	r0, [r3, #0]
 800357c:	e7e5      	b.n	800354a <_puts_r+0x76>
 800357e:	bf00      	nop
 8003580:	08003ea4 	.word	0x08003ea4
 8003584:	08003ec4 	.word	0x08003ec4
 8003588:	08003e84 	.word	0x08003e84

0800358c <puts>:
 800358c:	4b02      	ldr	r3, [pc, #8]	; (8003598 <puts+0xc>)
 800358e:	4601      	mov	r1, r0
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	f7ff bf9f 	b.w	80034d4 <_puts_r>
 8003596:	bf00      	nop
 8003598:	2000000c 	.word	0x2000000c

0800359c <strstr>:
 800359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359e:	7803      	ldrb	r3, [r0, #0]
 80035a0:	b17b      	cbz	r3, 80035c2 <strstr+0x26>
 80035a2:	4604      	mov	r4, r0
 80035a4:	7823      	ldrb	r3, [r4, #0]
 80035a6:	4620      	mov	r0, r4
 80035a8:	1c66      	adds	r6, r4, #1
 80035aa:	b17b      	cbz	r3, 80035cc <strstr+0x30>
 80035ac:	1e4a      	subs	r2, r1, #1
 80035ae:	1e63      	subs	r3, r4, #1
 80035b0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80035b4:	b14d      	cbz	r5, 80035ca <strstr+0x2e>
 80035b6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80035ba:	4634      	mov	r4, r6
 80035bc:	42af      	cmp	r7, r5
 80035be:	d0f7      	beq.n	80035b0 <strstr+0x14>
 80035c0:	e7f0      	b.n	80035a4 <strstr+0x8>
 80035c2:	780b      	ldrb	r3, [r1, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf18      	it	ne
 80035c8:	2000      	movne	r0, #0
 80035ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035cc:	4618      	mov	r0, r3
 80035ce:	e7fc      	b.n	80035ca <strstr+0x2e>

080035d0 <__swbuf_r>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	460e      	mov	r6, r1
 80035d4:	4614      	mov	r4, r2
 80035d6:	4605      	mov	r5, r0
 80035d8:	b118      	cbz	r0, 80035e2 <__swbuf_r+0x12>
 80035da:	6983      	ldr	r3, [r0, #24]
 80035dc:	b90b      	cbnz	r3, 80035e2 <__swbuf_r+0x12>
 80035de:	f000 f9a7 	bl	8003930 <__sinit>
 80035e2:	4b21      	ldr	r3, [pc, #132]	; (8003668 <__swbuf_r+0x98>)
 80035e4:	429c      	cmp	r4, r3
 80035e6:	d12a      	bne.n	800363e <__swbuf_r+0x6e>
 80035e8:	686c      	ldr	r4, [r5, #4]
 80035ea:	69a3      	ldr	r3, [r4, #24]
 80035ec:	60a3      	str	r3, [r4, #8]
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	071a      	lsls	r2, r3, #28
 80035f2:	d52e      	bpl.n	8003652 <__swbuf_r+0x82>
 80035f4:	6923      	ldr	r3, [r4, #16]
 80035f6:	b363      	cbz	r3, 8003652 <__swbuf_r+0x82>
 80035f8:	6923      	ldr	r3, [r4, #16]
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	b2f6      	uxtb	r6, r6
 80035fe:	1ac0      	subs	r0, r0, r3
 8003600:	6963      	ldr	r3, [r4, #20]
 8003602:	4637      	mov	r7, r6
 8003604:	4283      	cmp	r3, r0
 8003606:	dc04      	bgt.n	8003612 <__swbuf_r+0x42>
 8003608:	4621      	mov	r1, r4
 800360a:	4628      	mov	r0, r5
 800360c:	f000 f926 	bl	800385c <_fflush_r>
 8003610:	bb28      	cbnz	r0, 800365e <__swbuf_r+0x8e>
 8003612:	68a3      	ldr	r3, [r4, #8]
 8003614:	3001      	adds	r0, #1
 8003616:	3b01      	subs	r3, #1
 8003618:	60a3      	str	r3, [r4, #8]
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	6022      	str	r2, [r4, #0]
 8003620:	701e      	strb	r6, [r3, #0]
 8003622:	6963      	ldr	r3, [r4, #20]
 8003624:	4283      	cmp	r3, r0
 8003626:	d004      	beq.n	8003632 <__swbuf_r+0x62>
 8003628:	89a3      	ldrh	r3, [r4, #12]
 800362a:	07db      	lsls	r3, r3, #31
 800362c:	d519      	bpl.n	8003662 <__swbuf_r+0x92>
 800362e:	2e0a      	cmp	r6, #10
 8003630:	d117      	bne.n	8003662 <__swbuf_r+0x92>
 8003632:	4621      	mov	r1, r4
 8003634:	4628      	mov	r0, r5
 8003636:	f000 f911 	bl	800385c <_fflush_r>
 800363a:	b190      	cbz	r0, 8003662 <__swbuf_r+0x92>
 800363c:	e00f      	b.n	800365e <__swbuf_r+0x8e>
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <__swbuf_r+0x9c>)
 8003640:	429c      	cmp	r4, r3
 8003642:	d101      	bne.n	8003648 <__swbuf_r+0x78>
 8003644:	68ac      	ldr	r4, [r5, #8]
 8003646:	e7d0      	b.n	80035ea <__swbuf_r+0x1a>
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <__swbuf_r+0xa0>)
 800364a:	429c      	cmp	r4, r3
 800364c:	bf08      	it	eq
 800364e:	68ec      	ldreq	r4, [r5, #12]
 8003650:	e7cb      	b.n	80035ea <__swbuf_r+0x1a>
 8003652:	4621      	mov	r1, r4
 8003654:	4628      	mov	r0, r5
 8003656:	f000 f80d 	bl	8003674 <__swsetup_r>
 800365a:	2800      	cmp	r0, #0
 800365c:	d0cc      	beq.n	80035f8 <__swbuf_r+0x28>
 800365e:	f04f 37ff 	mov.w	r7, #4294967295
 8003662:	4638      	mov	r0, r7
 8003664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003666:	bf00      	nop
 8003668:	08003ea4 	.word	0x08003ea4
 800366c:	08003ec4 	.word	0x08003ec4
 8003670:	08003e84 	.word	0x08003e84

08003674 <__swsetup_r>:
 8003674:	4b32      	ldr	r3, [pc, #200]	; (8003740 <__swsetup_r+0xcc>)
 8003676:	b570      	push	{r4, r5, r6, lr}
 8003678:	681d      	ldr	r5, [r3, #0]
 800367a:	4606      	mov	r6, r0
 800367c:	460c      	mov	r4, r1
 800367e:	b125      	cbz	r5, 800368a <__swsetup_r+0x16>
 8003680:	69ab      	ldr	r3, [r5, #24]
 8003682:	b913      	cbnz	r3, 800368a <__swsetup_r+0x16>
 8003684:	4628      	mov	r0, r5
 8003686:	f000 f953 	bl	8003930 <__sinit>
 800368a:	4b2e      	ldr	r3, [pc, #184]	; (8003744 <__swsetup_r+0xd0>)
 800368c:	429c      	cmp	r4, r3
 800368e:	d10f      	bne.n	80036b0 <__swsetup_r+0x3c>
 8003690:	686c      	ldr	r4, [r5, #4]
 8003692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003696:	b29a      	uxth	r2, r3
 8003698:	0715      	lsls	r5, r2, #28
 800369a:	d42c      	bmi.n	80036f6 <__swsetup_r+0x82>
 800369c:	06d0      	lsls	r0, r2, #27
 800369e:	d411      	bmi.n	80036c4 <__swsetup_r+0x50>
 80036a0:	2209      	movs	r2, #9
 80036a2:	6032      	str	r2, [r6, #0]
 80036a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a8:	81a3      	strh	r3, [r4, #12]
 80036aa:	f04f 30ff 	mov.w	r0, #4294967295
 80036ae:	e03e      	b.n	800372e <__swsetup_r+0xba>
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <__swsetup_r+0xd4>)
 80036b2:	429c      	cmp	r4, r3
 80036b4:	d101      	bne.n	80036ba <__swsetup_r+0x46>
 80036b6:	68ac      	ldr	r4, [r5, #8]
 80036b8:	e7eb      	b.n	8003692 <__swsetup_r+0x1e>
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <__swsetup_r+0xd8>)
 80036bc:	429c      	cmp	r4, r3
 80036be:	bf08      	it	eq
 80036c0:	68ec      	ldreq	r4, [r5, #12]
 80036c2:	e7e6      	b.n	8003692 <__swsetup_r+0x1e>
 80036c4:	0751      	lsls	r1, r2, #29
 80036c6:	d512      	bpl.n	80036ee <__swsetup_r+0x7a>
 80036c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036ca:	b141      	cbz	r1, 80036de <__swsetup_r+0x6a>
 80036cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036d0:	4299      	cmp	r1, r3
 80036d2:	d002      	beq.n	80036da <__swsetup_r+0x66>
 80036d4:	4630      	mov	r0, r6
 80036d6:	f000 fa19 	bl	8003b0c <_free_r>
 80036da:	2300      	movs	r3, #0
 80036dc:	6363      	str	r3, [r4, #52]	; 0x34
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036e4:	81a3      	strh	r3, [r4, #12]
 80036e6:	2300      	movs	r3, #0
 80036e8:	6063      	str	r3, [r4, #4]
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	f043 0308 	orr.w	r3, r3, #8
 80036f4:	81a3      	strh	r3, [r4, #12]
 80036f6:	6923      	ldr	r3, [r4, #16]
 80036f8:	b94b      	cbnz	r3, 800370e <__swsetup_r+0x9a>
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003704:	d003      	beq.n	800370e <__swsetup_r+0x9a>
 8003706:	4621      	mov	r1, r4
 8003708:	4630      	mov	r0, r6
 800370a:	f000 f9bf 	bl	8003a8c <__smakebuf_r>
 800370e:	89a2      	ldrh	r2, [r4, #12]
 8003710:	f012 0301 	ands.w	r3, r2, #1
 8003714:	d00c      	beq.n	8003730 <__swsetup_r+0xbc>
 8003716:	2300      	movs	r3, #0
 8003718:	60a3      	str	r3, [r4, #8]
 800371a:	6963      	ldr	r3, [r4, #20]
 800371c:	425b      	negs	r3, r3
 800371e:	61a3      	str	r3, [r4, #24]
 8003720:	6923      	ldr	r3, [r4, #16]
 8003722:	b953      	cbnz	r3, 800373a <__swsetup_r+0xc6>
 8003724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003728:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800372c:	d1ba      	bne.n	80036a4 <__swsetup_r+0x30>
 800372e:	bd70      	pop	{r4, r5, r6, pc}
 8003730:	0792      	lsls	r2, r2, #30
 8003732:	bf58      	it	pl
 8003734:	6963      	ldrpl	r3, [r4, #20]
 8003736:	60a3      	str	r3, [r4, #8]
 8003738:	e7f2      	b.n	8003720 <__swsetup_r+0xac>
 800373a:	2000      	movs	r0, #0
 800373c:	e7f7      	b.n	800372e <__swsetup_r+0xba>
 800373e:	bf00      	nop
 8003740:	2000000c 	.word	0x2000000c
 8003744:	08003ea4 	.word	0x08003ea4
 8003748:	08003ec4 	.word	0x08003ec4
 800374c:	08003e84 	.word	0x08003e84

08003750 <__sflush_r>:
 8003750:	898a      	ldrh	r2, [r1, #12]
 8003752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003756:	4605      	mov	r5, r0
 8003758:	0710      	lsls	r0, r2, #28
 800375a:	460c      	mov	r4, r1
 800375c:	d458      	bmi.n	8003810 <__sflush_r+0xc0>
 800375e:	684b      	ldr	r3, [r1, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	dc05      	bgt.n	8003770 <__sflush_r+0x20>
 8003764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	dc02      	bgt.n	8003770 <__sflush_r+0x20>
 800376a:	2000      	movs	r0, #0
 800376c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003772:	2e00      	cmp	r6, #0
 8003774:	d0f9      	beq.n	800376a <__sflush_r+0x1a>
 8003776:	2300      	movs	r3, #0
 8003778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800377c:	682f      	ldr	r7, [r5, #0]
 800377e:	6a21      	ldr	r1, [r4, #32]
 8003780:	602b      	str	r3, [r5, #0]
 8003782:	d032      	beq.n	80037ea <__sflush_r+0x9a>
 8003784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	075a      	lsls	r2, r3, #29
 800378a:	d505      	bpl.n	8003798 <__sflush_r+0x48>
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	1ac0      	subs	r0, r0, r3
 8003790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003792:	b10b      	cbz	r3, 8003798 <__sflush_r+0x48>
 8003794:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003796:	1ac0      	subs	r0, r0, r3
 8003798:	2300      	movs	r3, #0
 800379a:	4602      	mov	r2, r0
 800379c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800379e:	6a21      	ldr	r1, [r4, #32]
 80037a0:	4628      	mov	r0, r5
 80037a2:	47b0      	blx	r6
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	d106      	bne.n	80037b8 <__sflush_r+0x68>
 80037aa:	6829      	ldr	r1, [r5, #0]
 80037ac:	291d      	cmp	r1, #29
 80037ae:	d848      	bhi.n	8003842 <__sflush_r+0xf2>
 80037b0:	4a29      	ldr	r2, [pc, #164]	; (8003858 <__sflush_r+0x108>)
 80037b2:	40ca      	lsrs	r2, r1
 80037b4:	07d6      	lsls	r6, r2, #31
 80037b6:	d544      	bpl.n	8003842 <__sflush_r+0xf2>
 80037b8:	2200      	movs	r2, #0
 80037ba:	6062      	str	r2, [r4, #4]
 80037bc:	6922      	ldr	r2, [r4, #16]
 80037be:	04d9      	lsls	r1, r3, #19
 80037c0:	6022      	str	r2, [r4, #0]
 80037c2:	d504      	bpl.n	80037ce <__sflush_r+0x7e>
 80037c4:	1c42      	adds	r2, r0, #1
 80037c6:	d101      	bne.n	80037cc <__sflush_r+0x7c>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	b903      	cbnz	r3, 80037ce <__sflush_r+0x7e>
 80037cc:	6560      	str	r0, [r4, #84]	; 0x54
 80037ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037d0:	602f      	str	r7, [r5, #0]
 80037d2:	2900      	cmp	r1, #0
 80037d4:	d0c9      	beq.n	800376a <__sflush_r+0x1a>
 80037d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037da:	4299      	cmp	r1, r3
 80037dc:	d002      	beq.n	80037e4 <__sflush_r+0x94>
 80037de:	4628      	mov	r0, r5
 80037e0:	f000 f994 	bl	8003b0c <_free_r>
 80037e4:	2000      	movs	r0, #0
 80037e6:	6360      	str	r0, [r4, #52]	; 0x34
 80037e8:	e7c0      	b.n	800376c <__sflush_r+0x1c>
 80037ea:	2301      	movs	r3, #1
 80037ec:	4628      	mov	r0, r5
 80037ee:	47b0      	blx	r6
 80037f0:	1c41      	adds	r1, r0, #1
 80037f2:	d1c8      	bne.n	8003786 <__sflush_r+0x36>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0c5      	beq.n	8003786 <__sflush_r+0x36>
 80037fa:	2b1d      	cmp	r3, #29
 80037fc:	d001      	beq.n	8003802 <__sflush_r+0xb2>
 80037fe:	2b16      	cmp	r3, #22
 8003800:	d101      	bne.n	8003806 <__sflush_r+0xb6>
 8003802:	602f      	str	r7, [r5, #0]
 8003804:	e7b1      	b.n	800376a <__sflush_r+0x1a>
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800380c:	81a3      	strh	r3, [r4, #12]
 800380e:	e7ad      	b.n	800376c <__sflush_r+0x1c>
 8003810:	690f      	ldr	r7, [r1, #16]
 8003812:	2f00      	cmp	r7, #0
 8003814:	d0a9      	beq.n	800376a <__sflush_r+0x1a>
 8003816:	0793      	lsls	r3, r2, #30
 8003818:	bf18      	it	ne
 800381a:	2300      	movne	r3, #0
 800381c:	680e      	ldr	r6, [r1, #0]
 800381e:	bf08      	it	eq
 8003820:	694b      	ldreq	r3, [r1, #20]
 8003822:	eba6 0807 	sub.w	r8, r6, r7
 8003826:	600f      	str	r7, [r1, #0]
 8003828:	608b      	str	r3, [r1, #8]
 800382a:	f1b8 0f00 	cmp.w	r8, #0
 800382e:	dd9c      	ble.n	800376a <__sflush_r+0x1a>
 8003830:	4643      	mov	r3, r8
 8003832:	463a      	mov	r2, r7
 8003834:	6a21      	ldr	r1, [r4, #32]
 8003836:	4628      	mov	r0, r5
 8003838:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800383a:	47b0      	blx	r6
 800383c:	2800      	cmp	r0, #0
 800383e:	dc06      	bgt.n	800384e <__sflush_r+0xfe>
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003846:	81a3      	strh	r3, [r4, #12]
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	e78e      	b.n	800376c <__sflush_r+0x1c>
 800384e:	4407      	add	r7, r0
 8003850:	eba8 0800 	sub.w	r8, r8, r0
 8003854:	e7e9      	b.n	800382a <__sflush_r+0xda>
 8003856:	bf00      	nop
 8003858:	20400001 	.word	0x20400001

0800385c <_fflush_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	690b      	ldr	r3, [r1, #16]
 8003860:	4605      	mov	r5, r0
 8003862:	460c      	mov	r4, r1
 8003864:	b1db      	cbz	r3, 800389e <_fflush_r+0x42>
 8003866:	b118      	cbz	r0, 8003870 <_fflush_r+0x14>
 8003868:	6983      	ldr	r3, [r0, #24]
 800386a:	b90b      	cbnz	r3, 8003870 <_fflush_r+0x14>
 800386c:	f000 f860 	bl	8003930 <__sinit>
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <_fflush_r+0x48>)
 8003872:	429c      	cmp	r4, r3
 8003874:	d109      	bne.n	800388a <_fflush_r+0x2e>
 8003876:	686c      	ldr	r4, [r5, #4]
 8003878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800387c:	b17b      	cbz	r3, 800389e <_fflush_r+0x42>
 800387e:	4621      	mov	r1, r4
 8003880:	4628      	mov	r0, r5
 8003882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003886:	f7ff bf63 	b.w	8003750 <__sflush_r>
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <_fflush_r+0x4c>)
 800388c:	429c      	cmp	r4, r3
 800388e:	d101      	bne.n	8003894 <_fflush_r+0x38>
 8003890:	68ac      	ldr	r4, [r5, #8]
 8003892:	e7f1      	b.n	8003878 <_fflush_r+0x1c>
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <_fflush_r+0x50>)
 8003896:	429c      	cmp	r4, r3
 8003898:	bf08      	it	eq
 800389a:	68ec      	ldreq	r4, [r5, #12]
 800389c:	e7ec      	b.n	8003878 <_fflush_r+0x1c>
 800389e:	2000      	movs	r0, #0
 80038a0:	bd38      	pop	{r3, r4, r5, pc}
 80038a2:	bf00      	nop
 80038a4:	08003ea4 	.word	0x08003ea4
 80038a8:	08003ec4 	.word	0x08003ec4
 80038ac:	08003e84 	.word	0x08003e84

080038b0 <std>:
 80038b0:	2300      	movs	r3, #0
 80038b2:	b510      	push	{r4, lr}
 80038b4:	4604      	mov	r4, r0
 80038b6:	e9c0 3300 	strd	r3, r3, [r0]
 80038ba:	6083      	str	r3, [r0, #8]
 80038bc:	8181      	strh	r1, [r0, #12]
 80038be:	6643      	str	r3, [r0, #100]	; 0x64
 80038c0:	81c2      	strh	r2, [r0, #14]
 80038c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038c6:	6183      	str	r3, [r0, #24]
 80038c8:	4619      	mov	r1, r3
 80038ca:	2208      	movs	r2, #8
 80038cc:	305c      	adds	r0, #92	; 0x5c
 80038ce:	f7ff fdf9 	bl	80034c4 <memset>
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <std+0x38>)
 80038d4:	6224      	str	r4, [r4, #32]
 80038d6:	6263      	str	r3, [r4, #36]	; 0x24
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <std+0x3c>)
 80038da:	62a3      	str	r3, [r4, #40]	; 0x28
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <std+0x40>)
 80038de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <std+0x44>)
 80038e2:	6323      	str	r3, [r4, #48]	; 0x30
 80038e4:	bd10      	pop	{r4, pc}
 80038e6:	bf00      	nop
 80038e8:	08003c79 	.word	0x08003c79
 80038ec:	08003c9b 	.word	0x08003c9b
 80038f0:	08003cd3 	.word	0x08003cd3
 80038f4:	08003cf7 	.word	0x08003cf7

080038f8 <_cleanup_r>:
 80038f8:	4901      	ldr	r1, [pc, #4]	; (8003900 <_cleanup_r+0x8>)
 80038fa:	f000 b885 	b.w	8003a08 <_fwalk_reent>
 80038fe:	bf00      	nop
 8003900:	0800385d 	.word	0x0800385d

08003904 <__sfmoreglue>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	2568      	movs	r5, #104	; 0x68
 8003908:	1e4a      	subs	r2, r1, #1
 800390a:	4355      	muls	r5, r2
 800390c:	460e      	mov	r6, r1
 800390e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003912:	f000 f947 	bl	8003ba4 <_malloc_r>
 8003916:	4604      	mov	r4, r0
 8003918:	b140      	cbz	r0, 800392c <__sfmoreglue+0x28>
 800391a:	2100      	movs	r1, #0
 800391c:	e9c0 1600 	strd	r1, r6, [r0]
 8003920:	300c      	adds	r0, #12
 8003922:	60a0      	str	r0, [r4, #8]
 8003924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003928:	f7ff fdcc 	bl	80034c4 <memset>
 800392c:	4620      	mov	r0, r4
 800392e:	bd70      	pop	{r4, r5, r6, pc}

08003930 <__sinit>:
 8003930:	6983      	ldr	r3, [r0, #24]
 8003932:	b510      	push	{r4, lr}
 8003934:	4604      	mov	r4, r0
 8003936:	bb33      	cbnz	r3, 8003986 <__sinit+0x56>
 8003938:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800393c:	6503      	str	r3, [r0, #80]	; 0x50
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <__sinit+0x58>)
 8003940:	4a12      	ldr	r2, [pc, #72]	; (800398c <__sinit+0x5c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6282      	str	r2, [r0, #40]	; 0x28
 8003946:	4298      	cmp	r0, r3
 8003948:	bf04      	itt	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	6183      	streq	r3, [r0, #24]
 800394e:	f000 f81f 	bl	8003990 <__sfp>
 8003952:	6060      	str	r0, [r4, #4]
 8003954:	4620      	mov	r0, r4
 8003956:	f000 f81b 	bl	8003990 <__sfp>
 800395a:	60a0      	str	r0, [r4, #8]
 800395c:	4620      	mov	r0, r4
 800395e:	f000 f817 	bl	8003990 <__sfp>
 8003962:	2200      	movs	r2, #0
 8003964:	60e0      	str	r0, [r4, #12]
 8003966:	2104      	movs	r1, #4
 8003968:	6860      	ldr	r0, [r4, #4]
 800396a:	f7ff ffa1 	bl	80038b0 <std>
 800396e:	2201      	movs	r2, #1
 8003970:	2109      	movs	r1, #9
 8003972:	68a0      	ldr	r0, [r4, #8]
 8003974:	f7ff ff9c 	bl	80038b0 <std>
 8003978:	2202      	movs	r2, #2
 800397a:	2112      	movs	r1, #18
 800397c:	68e0      	ldr	r0, [r4, #12]
 800397e:	f7ff ff97 	bl	80038b0 <std>
 8003982:	2301      	movs	r3, #1
 8003984:	61a3      	str	r3, [r4, #24]
 8003986:	bd10      	pop	{r4, pc}
 8003988:	08003e80 	.word	0x08003e80
 800398c:	080038f9 	.word	0x080038f9

08003990 <__sfp>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <__sfp+0x70>)
 8003994:	4607      	mov	r7, r0
 8003996:	681e      	ldr	r6, [r3, #0]
 8003998:	69b3      	ldr	r3, [r6, #24]
 800399a:	b913      	cbnz	r3, 80039a2 <__sfp+0x12>
 800399c:	4630      	mov	r0, r6
 800399e:	f7ff ffc7 	bl	8003930 <__sinit>
 80039a2:	3648      	adds	r6, #72	; 0x48
 80039a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	d503      	bpl.n	80039b4 <__sfp+0x24>
 80039ac:	6833      	ldr	r3, [r6, #0]
 80039ae:	b133      	cbz	r3, 80039be <__sfp+0x2e>
 80039b0:	6836      	ldr	r6, [r6, #0]
 80039b2:	e7f7      	b.n	80039a4 <__sfp+0x14>
 80039b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039b8:	b16d      	cbz	r5, 80039d6 <__sfp+0x46>
 80039ba:	3468      	adds	r4, #104	; 0x68
 80039bc:	e7f4      	b.n	80039a8 <__sfp+0x18>
 80039be:	2104      	movs	r1, #4
 80039c0:	4638      	mov	r0, r7
 80039c2:	f7ff ff9f 	bl	8003904 <__sfmoreglue>
 80039c6:	6030      	str	r0, [r6, #0]
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d1f1      	bne.n	80039b0 <__sfp+0x20>
 80039cc:	230c      	movs	r3, #12
 80039ce:	4604      	mov	r4, r0
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	4620      	mov	r0, r4
 80039d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <__sfp+0x74>)
 80039d8:	6665      	str	r5, [r4, #100]	; 0x64
 80039da:	e9c4 5500 	strd	r5, r5, [r4]
 80039de:	60a5      	str	r5, [r4, #8]
 80039e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80039e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80039e8:	2208      	movs	r2, #8
 80039ea:	4629      	mov	r1, r5
 80039ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039f0:	f7ff fd68 	bl	80034c4 <memset>
 80039f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039fc:	e7e9      	b.n	80039d2 <__sfp+0x42>
 80039fe:	bf00      	nop
 8003a00:	08003e80 	.word	0x08003e80
 8003a04:	ffff0001 	.word	0xffff0001

08003a08 <_fwalk_reent>:
 8003a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a0c:	4680      	mov	r8, r0
 8003a0e:	4689      	mov	r9, r1
 8003a10:	2600      	movs	r6, #0
 8003a12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a16:	b914      	cbnz	r4, 8003a1e <_fwalk_reent+0x16>
 8003a18:	4630      	mov	r0, r6
 8003a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003a22:	3f01      	subs	r7, #1
 8003a24:	d501      	bpl.n	8003a2a <_fwalk_reent+0x22>
 8003a26:	6824      	ldr	r4, [r4, #0]
 8003a28:	e7f5      	b.n	8003a16 <_fwalk_reent+0xe>
 8003a2a:	89ab      	ldrh	r3, [r5, #12]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d907      	bls.n	8003a40 <_fwalk_reent+0x38>
 8003a30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a34:	3301      	adds	r3, #1
 8003a36:	d003      	beq.n	8003a40 <_fwalk_reent+0x38>
 8003a38:	4629      	mov	r1, r5
 8003a3a:	4640      	mov	r0, r8
 8003a3c:	47c8      	blx	r9
 8003a3e:	4306      	orrs	r6, r0
 8003a40:	3568      	adds	r5, #104	; 0x68
 8003a42:	e7ee      	b.n	8003a22 <_fwalk_reent+0x1a>

08003a44 <__swhatbuf_r>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	460e      	mov	r6, r1
 8003a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a4c:	b096      	sub	sp, #88	; 0x58
 8003a4e:	2900      	cmp	r1, #0
 8003a50:	4614      	mov	r4, r2
 8003a52:	461d      	mov	r5, r3
 8003a54:	da07      	bge.n	8003a66 <__swhatbuf_r+0x22>
 8003a56:	2300      	movs	r3, #0
 8003a58:	602b      	str	r3, [r5, #0]
 8003a5a:	89b3      	ldrh	r3, [r6, #12]
 8003a5c:	061a      	lsls	r2, r3, #24
 8003a5e:	d410      	bmi.n	8003a82 <__swhatbuf_r+0x3e>
 8003a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a64:	e00e      	b.n	8003a84 <__swhatbuf_r+0x40>
 8003a66:	466a      	mov	r2, sp
 8003a68:	f000 f96c 	bl	8003d44 <_fstat_r>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	dbf2      	blt.n	8003a56 <__swhatbuf_r+0x12>
 8003a70:	9a01      	ldr	r2, [sp, #4]
 8003a72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a7a:	425a      	negs	r2, r3
 8003a7c:	415a      	adcs	r2, r3
 8003a7e:	602a      	str	r2, [r5, #0]
 8003a80:	e7ee      	b.n	8003a60 <__swhatbuf_r+0x1c>
 8003a82:	2340      	movs	r3, #64	; 0x40
 8003a84:	2000      	movs	r0, #0
 8003a86:	6023      	str	r3, [r4, #0]
 8003a88:	b016      	add	sp, #88	; 0x58
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}

08003a8c <__smakebuf_r>:
 8003a8c:	898b      	ldrh	r3, [r1, #12]
 8003a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a90:	079d      	lsls	r5, r3, #30
 8003a92:	4606      	mov	r6, r0
 8003a94:	460c      	mov	r4, r1
 8003a96:	d507      	bpl.n	8003aa8 <__smakebuf_r+0x1c>
 8003a98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	6123      	str	r3, [r4, #16]
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	6163      	str	r3, [r4, #20]
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
 8003aa8:	ab01      	add	r3, sp, #4
 8003aaa:	466a      	mov	r2, sp
 8003aac:	f7ff ffca 	bl	8003a44 <__swhatbuf_r>
 8003ab0:	9900      	ldr	r1, [sp, #0]
 8003ab2:	4605      	mov	r5, r0
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f000 f875 	bl	8003ba4 <_malloc_r>
 8003aba:	b948      	cbnz	r0, 8003ad0 <__smakebuf_r+0x44>
 8003abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac0:	059a      	lsls	r2, r3, #22
 8003ac2:	d4ef      	bmi.n	8003aa4 <__smakebuf_r+0x18>
 8003ac4:	f023 0303 	bic.w	r3, r3, #3
 8003ac8:	f043 0302 	orr.w	r3, r3, #2
 8003acc:	81a3      	strh	r3, [r4, #12]
 8003ace:	e7e3      	b.n	8003a98 <__smakebuf_r+0xc>
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <__smakebuf_r+0x7c>)
 8003ad2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ad4:	89a3      	ldrh	r3, [r4, #12]
 8003ad6:	6020      	str	r0, [r4, #0]
 8003ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	9b00      	ldr	r3, [sp, #0]
 8003ae0:	6120      	str	r0, [r4, #16]
 8003ae2:	6163      	str	r3, [r4, #20]
 8003ae4:	9b01      	ldr	r3, [sp, #4]
 8003ae6:	b15b      	cbz	r3, 8003b00 <__smakebuf_r+0x74>
 8003ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aec:	4630      	mov	r0, r6
 8003aee:	f000 f93b 	bl	8003d68 <_isatty_r>
 8003af2:	b128      	cbz	r0, 8003b00 <__smakebuf_r+0x74>
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	f023 0303 	bic.w	r3, r3, #3
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	81a3      	strh	r3, [r4, #12]
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	431d      	orrs	r5, r3
 8003b04:	81a5      	strh	r5, [r4, #12]
 8003b06:	e7cd      	b.n	8003aa4 <__smakebuf_r+0x18>
 8003b08:	080038f9 	.word	0x080038f9

08003b0c <_free_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4605      	mov	r5, r0
 8003b10:	2900      	cmp	r1, #0
 8003b12:	d043      	beq.n	8003b9c <_free_r+0x90>
 8003b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b18:	1f0c      	subs	r4, r1, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bfb8      	it	lt
 8003b1e:	18e4      	addlt	r4, r4, r3
 8003b20:	f000 f944 	bl	8003dac <__malloc_lock>
 8003b24:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <_free_r+0x94>)
 8003b26:	6813      	ldr	r3, [r2, #0]
 8003b28:	4610      	mov	r0, r2
 8003b2a:	b933      	cbnz	r3, 8003b3a <_free_r+0x2e>
 8003b2c:	6063      	str	r3, [r4, #4]
 8003b2e:	6014      	str	r4, [r2, #0]
 8003b30:	4628      	mov	r0, r5
 8003b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b36:	f000 b93a 	b.w	8003dae <__malloc_unlock>
 8003b3a:	42a3      	cmp	r3, r4
 8003b3c:	d90b      	bls.n	8003b56 <_free_r+0x4a>
 8003b3e:	6821      	ldr	r1, [r4, #0]
 8003b40:	1862      	adds	r2, r4, r1
 8003b42:	4293      	cmp	r3, r2
 8003b44:	bf01      	itttt	eq
 8003b46:	681a      	ldreq	r2, [r3, #0]
 8003b48:	685b      	ldreq	r3, [r3, #4]
 8003b4a:	1852      	addeq	r2, r2, r1
 8003b4c:	6022      	streq	r2, [r4, #0]
 8003b4e:	6063      	str	r3, [r4, #4]
 8003b50:	6004      	str	r4, [r0, #0]
 8003b52:	e7ed      	b.n	8003b30 <_free_r+0x24>
 8003b54:	4613      	mov	r3, r2
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	b10a      	cbz	r2, 8003b5e <_free_r+0x52>
 8003b5a:	42a2      	cmp	r2, r4
 8003b5c:	d9fa      	bls.n	8003b54 <_free_r+0x48>
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	1858      	adds	r0, r3, r1
 8003b62:	42a0      	cmp	r0, r4
 8003b64:	d10b      	bne.n	8003b7e <_free_r+0x72>
 8003b66:	6820      	ldr	r0, [r4, #0]
 8003b68:	4401      	add	r1, r0
 8003b6a:	1858      	adds	r0, r3, r1
 8003b6c:	4282      	cmp	r2, r0
 8003b6e:	6019      	str	r1, [r3, #0]
 8003b70:	d1de      	bne.n	8003b30 <_free_r+0x24>
 8003b72:	6810      	ldr	r0, [r2, #0]
 8003b74:	6852      	ldr	r2, [r2, #4]
 8003b76:	4401      	add	r1, r0
 8003b78:	6019      	str	r1, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	e7d8      	b.n	8003b30 <_free_r+0x24>
 8003b7e:	d902      	bls.n	8003b86 <_free_r+0x7a>
 8003b80:	230c      	movs	r3, #12
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	e7d4      	b.n	8003b30 <_free_r+0x24>
 8003b86:	6820      	ldr	r0, [r4, #0]
 8003b88:	1821      	adds	r1, r4, r0
 8003b8a:	428a      	cmp	r2, r1
 8003b8c:	bf01      	itttt	eq
 8003b8e:	6811      	ldreq	r1, [r2, #0]
 8003b90:	6852      	ldreq	r2, [r2, #4]
 8003b92:	1809      	addeq	r1, r1, r0
 8003b94:	6021      	streq	r1, [r4, #0]
 8003b96:	6062      	str	r2, [r4, #4]
 8003b98:	605c      	str	r4, [r3, #4]
 8003b9a:	e7c9      	b.n	8003b30 <_free_r+0x24>
 8003b9c:	bd38      	pop	{r3, r4, r5, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200000fc 	.word	0x200000fc

08003ba4 <_malloc_r>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	1ccd      	adds	r5, r1, #3
 8003ba8:	f025 0503 	bic.w	r5, r5, #3
 8003bac:	3508      	adds	r5, #8
 8003bae:	2d0c      	cmp	r5, #12
 8003bb0:	bf38      	it	cc
 8003bb2:	250c      	movcc	r5, #12
 8003bb4:	2d00      	cmp	r5, #0
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	db01      	blt.n	8003bbe <_malloc_r+0x1a>
 8003bba:	42a9      	cmp	r1, r5
 8003bbc:	d903      	bls.n	8003bc6 <_malloc_r+0x22>
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	6033      	str	r3, [r6, #0]
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
 8003bc6:	f000 f8f1 	bl	8003dac <__malloc_lock>
 8003bca:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <_malloc_r+0xac>)
 8003bcc:	6814      	ldr	r4, [r2, #0]
 8003bce:	4621      	mov	r1, r4
 8003bd0:	b991      	cbnz	r1, 8003bf8 <_malloc_r+0x54>
 8003bd2:	4c20      	ldr	r4, [pc, #128]	; (8003c54 <_malloc_r+0xb0>)
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	b91b      	cbnz	r3, 8003be0 <_malloc_r+0x3c>
 8003bd8:	4630      	mov	r0, r6
 8003bda:	f000 f83d 	bl	8003c58 <_sbrk_r>
 8003bde:	6020      	str	r0, [r4, #0]
 8003be0:	4629      	mov	r1, r5
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 f838 	bl	8003c58 <_sbrk_r>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d124      	bne.n	8003c36 <_malloc_r+0x92>
 8003bec:	230c      	movs	r3, #12
 8003bee:	4630      	mov	r0, r6
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	f000 f8dc 	bl	8003dae <__malloc_unlock>
 8003bf6:	e7e4      	b.n	8003bc2 <_malloc_r+0x1e>
 8003bf8:	680b      	ldr	r3, [r1, #0]
 8003bfa:	1b5b      	subs	r3, r3, r5
 8003bfc:	d418      	bmi.n	8003c30 <_malloc_r+0x8c>
 8003bfe:	2b0b      	cmp	r3, #11
 8003c00:	d90f      	bls.n	8003c22 <_malloc_r+0x7e>
 8003c02:	600b      	str	r3, [r1, #0]
 8003c04:	18cc      	adds	r4, r1, r3
 8003c06:	50cd      	str	r5, [r1, r3]
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f000 f8d0 	bl	8003dae <__malloc_unlock>
 8003c0e:	f104 000b 	add.w	r0, r4, #11
 8003c12:	1d23      	adds	r3, r4, #4
 8003c14:	f020 0007 	bic.w	r0, r0, #7
 8003c18:	1ac3      	subs	r3, r0, r3
 8003c1a:	d0d3      	beq.n	8003bc4 <_malloc_r+0x20>
 8003c1c:	425a      	negs	r2, r3
 8003c1e:	50e2      	str	r2, [r4, r3]
 8003c20:	e7d0      	b.n	8003bc4 <_malloc_r+0x20>
 8003c22:	684b      	ldr	r3, [r1, #4]
 8003c24:	428c      	cmp	r4, r1
 8003c26:	bf16      	itet	ne
 8003c28:	6063      	strne	r3, [r4, #4]
 8003c2a:	6013      	streq	r3, [r2, #0]
 8003c2c:	460c      	movne	r4, r1
 8003c2e:	e7eb      	b.n	8003c08 <_malloc_r+0x64>
 8003c30:	460c      	mov	r4, r1
 8003c32:	6849      	ldr	r1, [r1, #4]
 8003c34:	e7cc      	b.n	8003bd0 <_malloc_r+0x2c>
 8003c36:	1cc4      	adds	r4, r0, #3
 8003c38:	f024 0403 	bic.w	r4, r4, #3
 8003c3c:	42a0      	cmp	r0, r4
 8003c3e:	d005      	beq.n	8003c4c <_malloc_r+0xa8>
 8003c40:	1a21      	subs	r1, r4, r0
 8003c42:	4630      	mov	r0, r6
 8003c44:	f000 f808 	bl	8003c58 <_sbrk_r>
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d0cf      	beq.n	8003bec <_malloc_r+0x48>
 8003c4c:	6025      	str	r5, [r4, #0]
 8003c4e:	e7db      	b.n	8003c08 <_malloc_r+0x64>
 8003c50:	200000fc 	.word	0x200000fc
 8003c54:	20000100 	.word	0x20000100

08003c58 <_sbrk_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	4c05      	ldr	r4, [pc, #20]	; (8003c74 <_sbrk_r+0x1c>)
 8003c5e:	4605      	mov	r5, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	f7fc fe8a 	bl	800097c <_sbrk>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_sbrk_r+0x1a>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_sbrk_r+0x1a>
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	20000250 	.word	0x20000250

08003c78 <__sread>:
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c80:	f000 f896 	bl	8003db0 <_read_r>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	bfab      	itete	ge
 8003c88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8003c8c:	181b      	addge	r3, r3, r0
 8003c8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c92:	bfac      	ite	ge
 8003c94:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c96:	81a3      	strhlt	r3, [r4, #12]
 8003c98:	bd10      	pop	{r4, pc}

08003c9a <__swrite>:
 8003c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9e:	461f      	mov	r7, r3
 8003ca0:	898b      	ldrh	r3, [r1, #12]
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	05db      	lsls	r3, r3, #23
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	4616      	mov	r6, r2
 8003caa:	d505      	bpl.n	8003cb8 <__swrite+0x1e>
 8003cac:	2302      	movs	r3, #2
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	f000 f868 	bl	8003d88 <_lseek_r>
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	4632      	mov	r2, r6
 8003cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cc0:	81a3      	strh	r3, [r4, #12]
 8003cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	4628      	mov	r0, r5
 8003cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cce:	f000 b817 	b.w	8003d00 <_write_r>

08003cd2 <__sseek>:
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cda:	f000 f855 	bl	8003d88 <_lseek_r>
 8003cde:	1c43      	adds	r3, r0, #1
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	bf15      	itete	ne
 8003ce4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cee:	81a3      	strheq	r3, [r4, #12]
 8003cf0:	bf18      	it	ne
 8003cf2:	81a3      	strhne	r3, [r4, #12]
 8003cf4:	bd10      	pop	{r4, pc}

08003cf6 <__sclose>:
 8003cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfa:	f000 b813 	b.w	8003d24 <_close_r>
	...

08003d00 <_write_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	4608      	mov	r0, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4c05      	ldr	r4, [pc, #20]	; (8003d20 <_write_r+0x20>)
 8003d0c:	6022      	str	r2, [r4, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f7fc fde7 	bl	80008e2 <_write>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d102      	bne.n	8003d1e <_write_r+0x1e>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	b103      	cbz	r3, 8003d1e <_write_r+0x1e>
 8003d1c:	602b      	str	r3, [r5, #0]
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	20000250 	.word	0x20000250

08003d24 <_close_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	2300      	movs	r3, #0
 8003d28:	4c05      	ldr	r4, [pc, #20]	; (8003d40 <_close_r+0x1c>)
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	f7fc fdf3 	bl	800091a <_close>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_close_r+0x1a>
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_close_r+0x1a>
 8003d3c:	602b      	str	r3, [r5, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	20000250 	.word	0x20000250

08003d44 <_fstat_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	2300      	movs	r3, #0
 8003d48:	4c06      	ldr	r4, [pc, #24]	; (8003d64 <_fstat_r+0x20>)
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	f7fc fded 	bl	8000930 <_fstat>
 8003d56:	1c43      	adds	r3, r0, #1
 8003d58:	d102      	bne.n	8003d60 <_fstat_r+0x1c>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	b103      	cbz	r3, 8003d60 <_fstat_r+0x1c>
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	bd38      	pop	{r3, r4, r5, pc}
 8003d62:	bf00      	nop
 8003d64:	20000250 	.word	0x20000250

08003d68 <_isatty_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	4c05      	ldr	r4, [pc, #20]	; (8003d84 <_isatty_r+0x1c>)
 8003d6e:	4605      	mov	r5, r0
 8003d70:	4608      	mov	r0, r1
 8003d72:	6023      	str	r3, [r4, #0]
 8003d74:	f7fc fdeb 	bl	800094e <_isatty>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d102      	bne.n	8003d82 <_isatty_r+0x1a>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	b103      	cbz	r3, 8003d82 <_isatty_r+0x1a>
 8003d80:	602b      	str	r3, [r5, #0]
 8003d82:	bd38      	pop	{r3, r4, r5, pc}
 8003d84:	20000250 	.word	0x20000250

08003d88 <_lseek_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4605      	mov	r5, r0
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	2200      	movs	r2, #0
 8003d92:	4c05      	ldr	r4, [pc, #20]	; (8003da8 <_lseek_r+0x20>)
 8003d94:	6022      	str	r2, [r4, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f7fc fde3 	bl	8000962 <_lseek>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_lseek_r+0x1e>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_lseek_r+0x1e>
 8003da4:	602b      	str	r3, [r5, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	20000250 	.word	0x20000250

08003dac <__malloc_lock>:
 8003dac:	4770      	bx	lr

08003dae <__malloc_unlock>:
 8003dae:	4770      	bx	lr

08003db0 <_read_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4605      	mov	r5, r0
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	2200      	movs	r2, #0
 8003dba:	4c05      	ldr	r4, [pc, #20]	; (8003dd0 <_read_r+0x20>)
 8003dbc:	6022      	str	r2, [r4, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f7fc fd72 	bl	80008a8 <_read>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_read_r+0x1e>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_read_r+0x1e>
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	20000250 	.word	0x20000250

08003dd4 <_init>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr

08003de0 <_fini>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	bf00      	nop
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr
